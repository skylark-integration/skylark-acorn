{"version":3,"sources":["identifier.js"],"names":["define","astralIdentifierCodes","astralIdentifierStartCodes","nonASCIIidentifierChars","nonASCIIidentifierStartChars","ecma5AndLessKeywords","keywords","5","5module","6","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","isInAstralSet","code","set","pos","i","length","reservedWords","3","strict","strictBind","keywordRelationalOperator","isIdentifierStart","astral","test","String","fromCharCode","isIdentifierChar"],"mappings":";;;;;;;AAAAA,QACI,oCACA,yCACA,sCACA,4CACD,SAAUC,EAAuBC,EAA4BC,EAAyBC,GACrF,aACA,MAOMC,EAAuB,8KACvBC,GACFC,EAAGF,EACHG,UAAWH,EAAuB,iBAClCI,EAAGJ,EAAuB,4CAGxBK,EAA0B,IAAIC,OAAO,IAAMP,EAA+B,KAC1EQ,EAAqB,IAAID,OAAO,IAAMP,EAA+BD,EAA0B,KACrG,SAASU,EAAcC,EAAMC,GACzB,IAAIC,EAAM,MACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,GAAK,EAAG,CAEpC,IADAD,GAAOD,EAAIE,IACDH,EACN,OAAO,EAEX,IADAE,GAAOD,EAAIE,EAAI,KACJH,EACP,OAAO,EAEf,OAAO,EAoCX,OACIK,eA9DAC,EAAG,sNACHb,EAAG,+CACHE,EAAG,OACHY,OAAQ,yEACRC,WAAY,kBA2DZhB,SAAUA,EACViB,0BApD8B,kBAqD9BC,kBAtCJ,SAA2BV,EAAMW,GAC7B,OAAIX,EAAO,GACS,KAATA,EACPA,EAAO,KAEPA,EAAO,GACS,KAATA,EACPA,EAAO,MAEPA,GAAQ,MACDA,GAAQ,KAAOJ,EAAwBgB,KAAKC,OAAOC,aAAad,KAC5D,IAAXW,GAEGZ,EAAcC,EAAMZ,MA0B3B2B,iBAxBJ,SAA0Bf,EAAMW,GAC5B,OAAIX,EAAO,GACS,KAATA,EACPA,EAAO,MAEPA,EAAO,MAEPA,EAAO,KAEPA,EAAO,GACS,KAATA,EACPA,EAAO,MAEPA,GAAQ,MACDA,GAAQ,KAAOF,EAAmBc,KAAKC,OAAOC,aAAad,KACvD,IAAXW,IAEGZ,EAAcC,EAAMZ,IAA+BW,EAAcC,EAAMb","file":"../identifier.js","sourcesContent":["define([\n    './generated/astralIdentifierCodes',\n    './generated/astralIdentifierStartCodes',\n    './generated/nonASCIIidentifierChars',\n    './generated/nonASCIIidentifierStartChars'\n], function (astralIdentifierCodes, astralIdentifierStartCodes, nonASCIIidentifierChars, nonASCIIidentifierStartChars) {\n    'use strict';\n    const reservedWords = {\n        3: 'abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile',\n        5: 'class enum extends super const export import',\n        6: 'enum',\n        strict: 'implements interface let package private protected public static yield',\n        strictBind: 'eval arguments'\n    };\n    const ecma5AndLessKeywords = 'break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this';\n    const keywords = {\n        5: ecma5AndLessKeywords,\n        '5module': ecma5AndLessKeywords + ' export import',\n        6: ecma5AndLessKeywords + ' const class extends export import super'\n    };\n    const keywordRelationalOperator = /^in(stanceof)?$/;\n    const nonASCIIidentifierStart = new RegExp('[' + nonASCIIidentifierStartChars + ']');\n    const nonASCIIidentifier = new RegExp('[' + nonASCIIidentifierStartChars + nonASCIIidentifierChars + ']');\n    function isInAstralSet(code, set) {\n        let pos = 65536;\n        for (let i = 0; i < set.length; i += 2) {\n            pos += set[i];\n            if (pos > code)\n                return false;\n            pos += set[i + 1];\n            if (pos >= code)\n                return true;\n        }\n        return false;\n    }\n    function isIdentifierStart(code, astral) {\n        if (code < 65)\n            return code === 36;\n        if (code < 91)\n            return true;\n        if (code < 97)\n            return code === 95;\n        if (code < 123)\n            return true;\n        if (code <= 65535)\n            return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));\n        if (astral === false)\n            return false;\n        return isInAstralSet(code, astralIdentifierStartCodes);\n    }\n    function isIdentifierChar(code, astral) {\n        if (code < 48)\n            return code === 36;\n        if (code < 58)\n            return true;\n        if (code < 65)\n            return false;\n        if (code < 91)\n            return true;\n        if (code < 97)\n            return code === 95;\n        if (code < 123)\n            return true;\n        if (code <= 65535)\n            return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));\n        if (astral === false)\n            return false;\n        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n    }\n    return {\n        reservedWords: reservedWords,\n        keywords: keywords,\n        keywordRelationalOperator: keywordRelationalOperator,\n        isIdentifierStart: isIdentifierStart,\n        isIdentifierChar: isIdentifierChar\n    };\n});"]}