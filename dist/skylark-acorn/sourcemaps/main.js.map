{"version":3,"sources":["main.js"],"names":["define","m_state","m_options","m_locutil","m_node","m_tokentype","tokTypes","keywordTypes","m_tokencontext","tokContexts","m_identifier","m_tokenize","m_whitespace","Parser","defaultOptions","Position","SourceLocation","getLineInfo","Node","TokenType","TokContext","isIdentifierChar","isIdentifierStart","Token","isNewLine","lineBreak","lineBreakG","nonASCIIwhitespace","acorn","version","parse","input","options","parseExpressionAt","pos","tokenizer"],"mappings":";;;;;;;AAAAA,QACI,UACA,cACA,cACA,SACA,eACA,aACA,UACA,YACA,YACA,SACA,cACA,cACA,cACA,iBACA,iBACA,eACA,aACA,gBACD,SAAUC,EAASC,EAAWC,EAAWC,EAAQC,EAAaC,EAAUC,EAAcC,EAAgBC,EAAaC,EAAcC,EAAYC,GAC5I,aACA,MAAMC,OAACA,GAAUZ,GACXa,eAACA,GAAkBZ,GACnBa,SAACA,EAAQC,eAAEA,EAAcC,YAAEA,GAAed,GAC1Ce,KAACA,GAAQd,GACTe,UAACA,GAAad,GACde,WAACA,GAAcZ,GACfa,iBAACA,EAAgBC,kBAAEA,GAAqBZ,GACxCa,MAACA,GAASZ,GACVa,UAACA,EAASC,UAAEA,EAASC,WAAEA,EAAUC,mBAAEA,GAAsBf,EAgC/D,OA9BAC,EAAOe,OACHf,OAAAA,EACAgB,QAHY,SAIZf,eAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAb,SAAAA,EACAC,aAAAA,EACAa,WAAAA,EACAX,YAAAA,EACAY,iBAAAA,EACAC,kBAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,mBAAAA,IAYAE,QAhCY,SAiCZhB,OAAAA,EACAC,eAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAC,UAAAA,EACAb,SAAAA,EACAC,aAAAA,EACAa,WAAAA,EACAX,YAAAA,EACAY,iBAAAA,EACAC,kBAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,UAAAA,EACAC,WAAAA,EACAC,mBAAAA,EACAG,MA7BJ,SAAeC,EAAOC,GAClB,OAAOnB,EAAOiB,MAAMC,EAAOC,IA6B3BC,kBA3BJ,SAA2BF,EAAOG,EAAKF,GACnC,OAAOnB,EAAOoB,kBAAkBF,EAAOG,EAAKF,IA2B5CG,UAzBJ,SAAmBJ,EAAOC,GACtB,OAAOnB,EAAOsB,UAAUJ,EAAOC","file":"../main.js","sourcesContent":["define([\n    './state',\n    './parseutil',\n    './statement',\n    './lval',\n    './expression',\n    './location',\n    './scope',\n    './options',\n    './locutil',\n    './node',\n    './tokentype',\n    './tokentype',\n    './tokentype',\n    './tokencontext',\n    './tokencontext',\n    './identifier',\n    './tokenize',\n    './whitespace'\n], function (m_state, m_options, m_locutil, m_node, m_tokentype, tokTypes, keywordTypes, m_tokencontext, tokContexts, m_identifier, m_tokenize, m_whitespace) {\n    'use strict';\n    const {Parser} = m_state;\n    const {defaultOptions} = m_options;\n    const {Position, SourceLocation, getLineInfo} = m_locutil;\n    const {Node} = m_node;\n    const {TokenType} = m_tokentype;\n    const {TokContext} = m_tokencontext;\n    const {isIdentifierChar, isIdentifierStart} = m_identifier;\n    const {Token} = m_tokenize;\n    const {isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace} = m_whitespace;\n    const version = '8.10.0';\n    Parser.acorn = {\n        Parser,\n        version,\n        defaultOptions,\n        Position,\n        SourceLocation,\n        getLineInfo,\n        Node,\n        TokenType,\n        tokTypes,\n        keywordTypes,\n        TokContext,\n        tokContexts,\n        isIdentifierChar,\n        isIdentifierStart,\n        Token,\n        isNewLine,\n        lineBreak,\n        lineBreakG,\n        nonASCIIwhitespace\n    };\n    function parse(input, options) {\n        return Parser.parse(input, options);\n    }\n    function parseExpressionAt(input, pos, options) {\n        return Parser.parseExpressionAt(input, pos, options);\n    }\n    function tokenizer(input, options) {\n        return Parser.tokenizer(input, options);\n    }\n    return {\n        version: version,\n        Parser,\n        defaultOptions,\n        Position,\n        SourceLocation,\n        getLineInfo,\n        Node,\n        TokenType,\n        tokTypes,\n        keywordTypes,\n        TokContext,\n        tokContexts,\n        isIdentifierChar,\n        isIdentifierStart,\n        Token,\n        isNewLine,\n        lineBreak,\n        lineBreakG,\n        nonASCIIwhitespace,\n        parse: parse,\n        parseExpressionAt: parseExpressionAt,\n        tokenizer: tokenizer\n    };\n});"]}