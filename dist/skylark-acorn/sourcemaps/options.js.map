{"version":3,"sources":["options.js"],"names":["define","m_util","m_locutil","hasOwn","isArray","SourceLocation","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowSuperOutsideMethod","allowHashBang","checkPrivateFields","locations","onToken","onComment","ranges","program","sourceFile","directSourceFile","preserveParens","warnedAboutEcmaVersion","getOptions","opts","options","opt","console","warn","tokens","token","push","array","block","text","start","end","startLoc","endLoc","comment","type","value","loc","this","range","pushComment"],"mappings":";;;;;;;AAAAA,QACI,SACA,aACD,SAAUC,EAAQC,GACjB,aACA,MAAMC,OAACA,EAAMC,QAAEA,GAAWH,GACpBI,eAACA,GAAkBH,EACnBI,GACFC,YAAa,KACbC,WAAY,SACZC,oBAAqB,KACrBC,gBAAiB,KACjBC,cAAe,KACfC,4BAA4B,EAC5BC,6BAA6B,EAC7BC,0BAA2B,KAC3BC,wBAAyB,KACzBC,eAAe,EACfC,oBAAoB,EACpBC,WAAW,EACXC,QAAS,KACTC,UAAW,KACXC,QAAQ,EACRC,QAAS,KACTC,WAAY,KACZC,iBAAkB,KAClBC,gBAAgB,GAEpB,IAAIC,GAAyB,EA8C7B,OACIpB,eAAgBA,EAChBqB,WA/CJ,SAAoBC,GAChB,IAAIC,KACJ,IAAK,IAAIC,KAAOxB,EACZuB,EAAQC,GAAOF,GAAQzB,EAAOyB,EAAME,GAAOF,EAAKE,GAAOxB,EAAewB,GAgB1E,GAf4B,WAAxBD,EAAQtB,YACRsB,EAAQtB,YAAc,IACQ,MAAvBsB,EAAQtB,cACVmB,GAA6C,iBAAZK,SAAwBA,QAAQC,OAClEN,GAAyB,EACzBK,QAAQC,KAAK,uHAEjBH,EAAQtB,YAAc,IACfsB,EAAQtB,aAAe,OAC9BsB,EAAQtB,aAAe,MAEE,MAAzBsB,EAAQlB,gBACRkB,EAAQlB,cAAgBkB,EAAQtB,YAAc,GAC7CqB,GAA8B,MAAtBA,EAAKZ,gBACda,EAAQb,cAAgBa,EAAQtB,aAAe,IAC/CH,EAAQyB,EAAQV,SAAU,CAC1B,IAAIc,EAASJ,EAAQV,QACrBU,EAAQV,QAAUe,CAAAA,GAASD,EAAOE,KAAKD,IAI3C,OAFI9B,EAAQyB,EAAQT,aAChBS,EAAQT,UAGhB,SAAqBS,EAASO,GAC1B,OAAO,SAAUC,EAAOC,EAAMC,EAAOC,EAAKC,EAAUC,GAChD,IAAIC,GACAC,KAAMP,EAAQ,QAAU,OACxBQ,MAAOP,EACPC,MAAOA,EACPC,IAAKA,GAELX,EAAQX,YACRyB,EAAQG,IAAM,IAAIzC,EAAe0C,KAAMN,EAAUC,IACjDb,EAAQR,SACRsB,EAAQK,OACJT,EACAC,IAERJ,EAAMD,KAAKQ,IAlBSM,CAAYpB,EAASA,EAAQT,YAC9CS","file":"../options.js","sourcesContent":["define([\n    './util',\n    './locutil'\n], function (m_util, m_locutil) {\n    'use strict';\n    const {hasOwn, isArray} = m_util;\n    const {SourceLocation} = m_locutil;\n    const defaultOptions = {\n        ecmaVersion: null,\n        sourceType: 'script',\n        onInsertedSemicolon: null,\n        onTrailingComma: null,\n        allowReserved: null,\n        allowReturnOutsideFunction: false,\n        allowImportExportEverywhere: false,\n        allowAwaitOutsideFunction: null,\n        allowSuperOutsideMethod: null,\n        allowHashBang: false,\n        checkPrivateFields: true,\n        locations: false,\n        onToken: null,\n        onComment: null,\n        ranges: false,\n        program: null,\n        sourceFile: null,\n        directSourceFile: null,\n        preserveParens: false\n    };\n    let warnedAboutEcmaVersion = false;\n    function getOptions(opts) {\n        let options = {};\n        for (let opt in defaultOptions)\n            options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];\n        if (options.ecmaVersion === 'latest') {\n            options.ecmaVersion = 100000000;\n        } else if (options.ecmaVersion == null) {\n            if (!warnedAboutEcmaVersion && typeof console === 'object' && console.warn) {\n                warnedAboutEcmaVersion = true;\n                console.warn('Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.');\n            }\n            options.ecmaVersion = 11;\n        } else if (options.ecmaVersion >= 2015) {\n            options.ecmaVersion -= 2009;\n        }\n        if (options.allowReserved == null)\n            options.allowReserved = options.ecmaVersion < 5;\n        if (!opts || opts.allowHashBang == null)\n            options.allowHashBang = options.ecmaVersion >= 14;\n        if (isArray(options.onToken)) {\n            let tokens = options.onToken;\n            options.onToken = token => tokens.push(token);\n        }\n        if (isArray(options.onComment))\n            options.onComment = pushComment(options, options.onComment);\n        return options;\n    }\n    function pushComment(options, array) {\n        return function (block, text, start, end, startLoc, endLoc) {\n            let comment = {\n                type: block ? 'Block' : 'Line',\n                value: text,\n                start: start,\n                end: end\n            };\n            if (options.locations)\n                comment.loc = new SourceLocation(this, startLoc, endLoc);\n            if (options.ranges)\n                comment.range = [\n                    start,\n                    end\n                ];\n            array.push(comment);\n        };\n    }\n    return {\n        defaultOptions: defaultOptions,\n        getOptions: getOptions\n    };\n});"]}