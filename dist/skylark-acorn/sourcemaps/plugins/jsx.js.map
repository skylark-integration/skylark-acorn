{"version":3,"sources":["plugins/jsx.js"],"names":["define","XHTMLEntities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","hexNumber","decimalNumber","acornJsxMap","WeakMap","getJsxTokens","acorn","Parser","acornJsx","get","tt","tokTypes","TokContext","TokenType","tc_oTag","tc_cTag","tc_expr","tokContexts","jsxName","jsxText","beforeExpr","jsxTagStart","startsExpr","jsxTagEnd","updateContext","this","context","push","exprAllowed","prevType","out","pop","slash","curContext","set","getQualifiedJSXName","object","type","name","namespace","property","jsx","options","require","tok","isNewLine","isIdentifierStart","isIdentifierChar","[object Object]","chunkStart","pos","input","length","raise","start","ch","charCodeAt","finishToken","getTokenFromCode","slice","jsx_readEntity","jsx_readNewLine","normalizeCRLF","String","fromCharCode","locations","curLine","lineStart","quote","string","entity","str","count","startPos","substr","test","parseInt","node","startNode","value","keyword","unexpected","next","finishNode","startLoc","jsx_parseIdentifier","allowNamespaces","eat","colon","startNodeAt","jsx_parseNamespacedName","dot","allowNamespacedObjects","newNode","braceL","jsx_parseExpressionContainer","expression","parseExprAtom","lastTokEnd","lastTokEndLoc","finishNodeAt","braceR","jsx_parseEmptyExpression","parseExpression","expect","ellipsis","argument","parseMaybeAssign","eq","jsx_parseAttributeValue","attributes","nodeName","jsx_parseElementName","jsx_parseAttribute","selfClosing","children","openingElement","jsx_parseOpeningElementAt","closingElement","contents","jsx_parseClosingElementAt","jsx_parseElementAt","fragmentOrElement","relational","parseLiteral","refShortHandDefaultPos","jsx_parseText","jsx_parseElement","super","code","jsx_readToken","jsx_readWord","jsx_readString","readToken","b_expr","b_tmpl","plugin","Object","defineProperty","configurable","enumerable"],"mappings":";;;;;;;AAAAA,UAAU,WACR,MAAMC,GACJC,KAAM,IACNC,IAAK,IACLC,KAAM,IACNC,GAAI,IACJC,GAAI,IACJC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,QAAS,IACTC,GAAI,IACJC,IAAK,IACLC,MAAO,IACPC,IAAK,IACLC,QAAS,IACTC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,QAAS,IACTC,GAAI,IACJC,IAAK,IACLC,OAAQ,IACRC,MAAO,IACPC,IAAK,IACLC,QAAS,IACTC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,SAAU,IACVC,MAAO,IACPC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,GAAI,IACJC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,IAAK,IACLC,IAAK,IACLC,GAAI,IACJC,IAAK,IACLC,IAAK,IACLC,IAAO,IACPC,OAAQ,IACRC,IAAK,IACLC,KAAM,IACNC,MAAO,IACPC,GAAI,IACJC,MAAO,IACPC,GAAI,IACJC,GAAI,IACJC,IAAK,IACLC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,MAAO,KAGHC,EAAY,gBACZC,EAAgB,QAGhBC,EAAc,IAAIC,QAGxB,SAASC,EAAaC,GACpBA,EAAQA,EAAMC,OAAOD,OAASA,EAC9B,IAAIE,EAAWL,EAAYM,IAAIH,GAC/B,IAAKE,EAAU,CACb,MAAME,EAAKJ,EAAMK,SACXC,EAAaN,EAAMM,WACnBC,EAAYP,EAAMO,UAClBC,EAAU,IAAIF,EAAW,QAAQ,GACjCG,EAAU,IAAIH,EAAW,SAAS,GAClCI,EAAU,IAAIJ,EAAW,kBAAkB,GAAM,GACjDK,GACJH,QAASA,EACTC,QAASA,EACTC,QAASA,GAELL,GACJO,QAAS,IAAIL,EAAU,WACvBM,QAAS,IAAIN,EAAU,WAAYO,YAAY,IAC/CC,YAAa,IAAIR,EAAU,eAAgBS,YAAY,IACvDC,UAAW,IAAIV,EAAU,cAG3BF,EAASU,YAAYG,cAAgB,WACnCC,KAAKC,QAAQC,KAAKX,GAClBS,KAAKC,QAAQC,KAAKb,GAClBW,KAAKG,aAAc,GAErBjB,EAASY,UAAUC,cAAgB,SAASK,GAC1C,IAAIC,EAAML,KAAKC,QAAQK,MACnBD,IAAQhB,GAAWe,IAAanB,EAAGsB,OAASF,IAAQf,GACtDU,KAAKC,QAAQK,MACbN,KAAKG,YAAcH,KAAKQ,eAAiBjB,GAEzCS,KAAKG,aAAc,GAIvBpB,GAAaS,YAAaA,EAAaN,SAAUA,GACjDR,EAAY+B,IAAI5B,EAAOE,GAGzB,OAAOA,EAKT,SAAS2B,EAAoBC,GAC3B,OAAKA,EAGe,kBAAhBA,EAAOC,KACFD,EAAOE,KAEI,sBAAhBF,EAAOC,KACFD,EAAOG,UAAUD,KAAO,IAAMF,EAAOE,KAAKA,KAE/B,wBAAhBF,EAAOC,KACFF,EAAoBC,EAAOA,QAAU,IAC5CD,EAAoBC,EAAOI,eAF7B,EARSJ,EAaX,SAASK,EAAIC,GAEX,OADAA,EAAUA,MACH,SAASnC,GACd,OAiBJ,SAAgBmC,EAASnC,GACvB,MAAMD,EAAQC,EAAOD,OAASqC,QAAQ,SAChCnC,EAAWH,EAAaC,GACxBI,EAAKJ,EAAMK,SACXiC,EAAMpC,EAASG,SACfM,EAAcX,EAAMW,YACpBH,EAAUN,EAASS,YAAYH,QAC/BC,EAAUP,EAASS,YAAYF,QAC/BC,EAAUR,EAASS,YAAYD,QAC/B6B,EAAYvC,EAAMuC,UAClBC,EAAoBxC,EAAMwC,kBAC1BC,EAAmBzC,EAAMyC,iBAE/B,qBAAqBxC,EAEnBC,sBACE,OAAOA,EAITwC,gBACE,IAAIlB,EAAM,GAAImB,EAAaxB,KAAKyB,IAChC,OAAS,CACHzB,KAAKyB,KAAOzB,KAAK0B,MAAMC,QACzB3B,KAAK4B,MAAM5B,KAAK6B,MAAO,6BACzB,IAAIC,EAAK9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,KAEpC,OAAQK,GACR,KAAK,GACL,KAAK,IACH,OAAI9B,KAAKyB,MAAQzB,KAAK6B,MACT,KAAPC,GAAa9B,KAAKG,eAClBH,KAAKyB,IACAzB,KAAKgC,YAAYb,EAAIvB,cAEvBI,KAAKiC,iBAAiBH,IAE/BzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KAClCzB,KAAKgC,YAAYb,EAAIzB,QAASW,IAEvC,KAAK,GACHA,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKmC,iBACZX,EAAaxB,KAAKyB,IAClB,MAEF,KAAK,GACL,KAAK,IACHzB,KAAK4B,MACH5B,KAAKyB,IACL,qBAAuBzB,KAAK0B,MAAM1B,KAAKyB,KAAO,qBACpC,KAAPK,EAAY,OAAS,YAAc,WAAmB9B,KAAK0B,MAAM1B,KAAKyB,KAAO,QAGpF,QACML,EAAUU,IACZzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKoC,iBAAgB,GAC5BZ,EAAaxB,KAAKyB,OAEhBzB,KAAKyB,MAMfF,gBAAgBc,GACd,IACIhC,EADAyB,EAAK9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,KAcpC,QAZEzB,KAAKyB,IACI,KAAPK,GAAiD,KAApC9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,QACxCzB,KAAKyB,IACPpB,EAAMgC,EAAgB,KAAO,QAE7BhC,EAAMiC,OAAOC,aAAaT,GAExB9B,KAAKiB,QAAQuB,cACbxC,KAAKyC,QACPzC,KAAK0C,UAAY1C,KAAKyB,KAGjBpB,EAGTkB,eAAeoB,GACb,IAAItC,EAAM,GAAImB,IAAexB,KAAKyB,IAClC,OAAS,CACHzB,KAAKyB,KAAOzB,KAAK0B,MAAMC,QACzB3B,KAAK4B,MAAM5B,KAAK6B,MAAO,gCACzB,IAAIC,EAAK9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,KACpC,GAAIK,IAAOa,EAAO,MACP,KAAPb,GACFzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKmC,iBACZX,EAAaxB,KAAKyB,KACTL,EAAUU,IACnBzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKoC,iBAAgB,GAC5BZ,EAAaxB,KAAKyB,OAEhBzB,KAAKyB,IAIX,OADApB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,OAClCzB,KAAKgC,YAAY/C,EAAG2D,OAAQvC,GAGrCkB,iBACE,IAAyBsB,EAArBC,EAAM,GAAIC,EAAQ,EAClBjB,EAAK9B,KAAK0B,MAAM1B,KAAKyB,KACd,MAAPK,GACF9B,KAAK4B,MAAM5B,KAAKyB,IAAK,uCACvB,IAAIuB,IAAahD,KAAKyB,IACtB,KAAOzB,KAAKyB,IAAMzB,KAAK0B,MAAMC,QAAUoB,IAAU,IAAI,CAEnD,GAAW,OADXjB,EAAK9B,KAAK0B,MAAM1B,KAAKyB,QACL,CACC,MAAXqB,EAAI,GACS,MAAXA,EAAI,IACNA,EAAMA,EAAIG,OAAO,GACbzE,EAAU0E,KAAKJ,KACjBD,EAASP,OAAOC,aAAaY,SAASL,EAAK,QAE7CA,EAAMA,EAAIG,OAAO,GACbxE,EAAcyE,KAAKJ,KACrBD,EAASP,OAAOC,aAAaY,SAASL,EAAK,OAG/CD,EAASnU,EAAcoU,GAEzB,MAEFA,GAAOhB,EAET,OAAKe,IACH7C,KAAKyB,IAAMuB,EACJ,KAYXzB,eACE,IAAIO,EAAID,EAAQ7B,KAAKyB,IACrB,GACEK,EAAK9B,KAAK0B,MAAMK,aAAa/B,KAAKyB,WAC3BH,EAAiBQ,IAAc,KAAPA,GACjC,OAAO9B,KAAKgC,YAAYb,EAAI1B,QAASO,KAAK0B,MAAMQ,MAAML,EAAO7B,KAAKyB,MAKpEF,sBACE,IAAI6B,EAAOpD,KAAKqD,YAQhB,OAPIrD,KAAKY,OAASO,EAAI1B,QACpB2D,EAAKvC,KAAOb,KAAKsD,MACVtD,KAAKY,KAAK2C,QACjBH,EAAKvC,KAAOb,KAAKY,KAAK2C,QAEtBvD,KAAKwD,aACPxD,KAAKyD,OACEzD,KAAK0D,WAAWN,EAAM,iBAK/B7B,0BACE,IAAIyB,EAAWhD,KAAK6B,MAAO8B,EAAW3D,KAAK2D,SACvC9C,EAAOb,KAAK4D,sBAChB,IAAK3C,EAAQ4C,kBAAoB7D,KAAK8D,IAAI7E,EAAG8E,OAAQ,OAAOlD,EAC5D,IAAIuC,EAAOpD,KAAKgE,YAAYhB,EAAUW,GAGtC,OAFAP,EAAKtC,UAAYD,EACjBuC,EAAKvC,KAAOb,KAAK4D,sBACV5D,KAAK0D,WAAWN,EAAM,qBAM/B7B,uBACE,GAAIvB,KAAKY,OAASO,EAAIrB,UAAW,MAAO,GACxC,IAAIkD,EAAWhD,KAAK6B,MAAO8B,EAAW3D,KAAK2D,SACvCP,EAAOpD,KAAKiE,0BAIhB,IAHIjE,KAAKY,OAAS3B,EAAGiF,KAAqB,sBAAdd,EAAKxC,MAAiCK,EAAQkD,wBACxEnE,KAAKwD,aAEAxD,KAAK8D,IAAI7E,EAAGiF,MAAM,CACvB,IAAIE,EAAUpE,KAAKgE,YAAYhB,EAAUW,GACzCS,EAAQzD,OAASyC,EACjBgB,EAAQrD,SAAWf,KAAK4D,sBACxBR,EAAOpD,KAAK0D,WAAWU,EAAS,uBAElC,OAAOhB,EAKT7B,0BACE,OAAQvB,KAAKY,MACb,KAAK3B,EAAGoF,OACN,IAAIjB,EAAOpD,KAAKsE,+BAGhB,MAF6B,uBAAzBlB,EAAKmB,WAAW3D,MAClBZ,KAAK4B,MAAMwB,EAAKvB,MAAO,+DAClBuB,EAET,KAAKjC,EAAIvB,YACT,KAAKX,EAAG2D,OACN,OAAO5C,KAAKwE,gBAEd,QACExE,KAAK4B,MAAM5B,KAAK6B,MAAO,kEAQ3BN,2BACE,IAAI6B,EAAOpD,KAAKgE,YAAYhE,KAAKyE,WAAYzE,KAAK0E,eAClD,OAAO1E,KAAK2E,aAAavB,EAAM,qBAAsBpD,KAAK6B,MAAO7B,KAAK2D,UAKxEpC,+BACE,IAAI6B,EAAOpD,KAAKqD,YAMhB,OALArD,KAAKyD,OACLL,EAAKmB,WAAavE,KAAKY,OAAS3B,EAAG2F,OAC/B5E,KAAK6E,2BACL7E,KAAK8E,kBACT9E,KAAK+E,OAAO9F,EAAG2F,QACR5E,KAAK0D,WAAWN,EAAM,0BAK/B7B,qBACE,IAAI6B,EAAOpD,KAAKqD,YAChB,OAAIrD,KAAK8D,IAAI7E,EAAGoF,SACdrE,KAAK+E,OAAO9F,EAAG+F,UACf5B,EAAK6B,SAAWjF,KAAKkF,mBACrBlF,KAAK+E,OAAO9F,EAAG2F,QACR5E,KAAK0D,WAAWN,EAAM,wBAE/BA,EAAKvC,KAAOb,KAAKiE,0BACjBb,EAAKE,MAAQtD,KAAK8D,IAAI7E,EAAGkG,IAAMnF,KAAKoF,0BAA4B,KACzDpF,KAAK0D,WAAWN,EAAM,iBAK/B7B,0BAA0ByB,EAAUW,GAClC,IAAIP,EAAOpD,KAAKgE,YAAYhB,EAAUW,GACtCP,EAAKiC,cACL,IAAIC,EAAWtF,KAAKuF,uBAEpB,IADID,IAAUlC,EAAKvC,KAAOyE,GACnBtF,KAAKY,OAAS3B,EAAGsB,OAASP,KAAKY,OAASO,EAAIrB,WACjDsD,EAAKiC,WAAWnF,KAAKF,KAAKwF,sBAG5B,OAFApC,EAAKqC,YAAczF,KAAK8D,IAAI7E,EAAGsB,OAC/BP,KAAK+E,OAAO5D,EAAIrB,WACTE,KAAK0D,WAAWN,EAAMkC,EAAW,oBAAsB,sBAKhE/D,0BAA0ByB,EAAUW,GAClC,IAAIP,EAAOpD,KAAKgE,YAAYhB,EAAUW,GAClC2B,EAAWtF,KAAKuF,uBAGpB,OAFID,IAAUlC,EAAKvC,KAAOyE,GAC1BtF,KAAK+E,OAAO5D,EAAIrB,WACTE,KAAK0D,WAAWN,EAAMkC,EAAW,oBAAsB,sBAMhE/D,mBAAmByB,EAAUW,GAC3B,IAAIP,EAAOpD,KAAKgE,YAAYhB,EAAUW,GAClC+B,KACAC,EAAiB3F,KAAK4F,0BAA0B5C,EAAUW,GAC1DkC,EAAiB,KAErB,IAAKF,EAAeF,YAAa,CAC/BK,EAAU,OACR,OAAQ9F,KAAKY,MACb,KAAKO,EAAIvB,YAGP,GAFAoD,EAAWhD,KAAK6B,MAAO8B,EAAW3D,KAAK2D,SACvC3D,KAAKyD,OACDzD,KAAK8D,IAAI7E,EAAGsB,OAAQ,CACtBsF,EAAiB7F,KAAK+F,0BAA0B/C,EAAUW,GAC1D,MAAMmC,EAERJ,EAASxF,KAAKF,KAAKgG,mBAAmBhD,EAAUW,IAChD,MAEF,KAAKxC,EAAIzB,QACPgG,EAASxF,KAAKF,KAAKwE,iBACnB,MAEF,KAAKvF,EAAGoF,OACNqB,EAASxF,KAAKF,KAAKsE,gCACnB,MAEF,QACEtE,KAAKwD,aAGL9C,EAAoBmF,EAAehF,QAAUH,EAAoBiF,EAAe9E,OAClFb,KAAK4B,MACHiE,EAAehE,MACf,+CAAiDnB,EAAoBiF,EAAe9E,MAAQ,KAGlG,IAAIoF,EAAoBN,EAAe9E,KAAO,UAAY,WAQ1D,OANAuC,EAAK,UAAY6C,GAAqBN,EACtCvC,EAAK,UAAY6C,GAAqBJ,EACtCzC,EAAKsC,SAAWA,EACZ1F,KAAKY,OAAS3B,EAAGiH,YAA6B,MAAflG,KAAKsD,OACtCtD,KAAK4B,MAAM5B,KAAK6B,MAAO,6DAElB7B,KAAK0D,WAAWN,EAAM,MAAQ6C,GAKvC1E,gBACE,IAAI6B,EAAOpD,KAAKmG,aAAanG,KAAKsD,OAElC,OADAF,EAAKxC,KAAO,UACLwC,EAKT7B,mBACE,IAAIyB,EAAWhD,KAAK6B,MAAO8B,EAAW3D,KAAK2D,SAE3C,OADA3D,KAAKyD,OACEzD,KAAKgG,mBAAmBhD,EAAUW,GAG3CpC,cAAc6E,GACZ,OAAIpG,KAAKY,OAASO,EAAIzB,QACbM,KAAKqG,gBACLrG,KAAKY,OAASO,EAAIvB,YAClBI,KAAKsG,mBAELC,MAAM/B,cAAc4B,GAG/B7E,UAAUiF,GACR,IAAIvG,EAAUD,KAAKQ,aAEnB,GAAIP,IAAYV,EAAS,OAAOS,KAAKyG,gBAErC,GAAIxG,IAAYZ,GAAWY,IAAYX,EAAS,CAC9C,GAAI+B,EAAkBmF,GAAO,OAAOxG,KAAK0G,eAEzC,GAAY,IAARF,EAEF,QADExG,KAAKyB,IACAzB,KAAKgC,YAAYb,EAAIrB,WAG9B,IAAc,KAAT0G,GAAwB,KAATA,IAAgBvG,GAAWZ,EAC7C,OAAOW,KAAK2G,eAAeH,GAG/B,OAAa,KAATA,GAAexG,KAAKG,aAAuD,KAAxCH,KAAK0B,MAAMK,WAAW/B,KAAKyB,IAAM,MACpEzB,KAAKyB,IACAzB,KAAKgC,YAAYb,EAAIvB,cAEvB2G,MAAMK,UAAUJ,GAGzBjF,cAAcnB,GACZ,GAAIJ,KAAKY,MAAQ3B,EAAGoF,OAAQ,CAC1B,IAAI7D,EAAaR,KAAKQ,aAClBA,GAAcnB,EAASW,KAAKC,QAAQC,KAAKV,EAAYqH,QAChDrG,GAAcjB,EAASS,KAAKC,QAAQC,KAAKV,EAAYsH,QACzDP,MAAMxG,cAAcK,GACzBJ,KAAKG,aAAc,MACd,CAAA,GAAIH,KAAKY,OAAS3B,EAAGsB,OAASH,IAAae,EAAIvB,YAKpD,OAAO2G,MAAMxG,cAAcK,GAJ3BJ,KAAKC,QAAQ0B,QAAU,EACvB3B,KAAKC,QAAQC,KAAKZ,GAClBU,KAAKG,aAAc,KAtZhB4G,EACLlD,iBAA6C,IAA5B5C,EAAQ4C,gBACzBM,yBAA0BlD,EAAQkD,wBACjCrF,IA2ZP,OArZAkI,OAAOC,eAAejG,EAAK,YACzBhC,IAAK,WACH,OAAOJ,EAAasC,QAAQ,UAAUhC,UAExCgI,cAAc,EACdC,YAAY,IAgZPnG","file":"../../plugins/jsx.js","sourcesContent":["define([],function(){\r\n  const XHTMLEntities = {\r\n    quot: '\\u0022',\r\n    amp: '&',\r\n    apos: '\\u0027',\r\n    lt: '<',\r\n    gt: '>',\r\n    nbsp: '\\u00A0',\r\n    iexcl: '\\u00A1',\r\n    cent: '\\u00A2',\r\n    pound: '\\u00A3',\r\n    curren: '\\u00A4',\r\n    yen: '\\u00A5',\r\n    brvbar: '\\u00A6',\r\n    sect: '\\u00A7',\r\n    uml: '\\u00A8',\r\n    copy: '\\u00A9',\r\n    ordf: '\\u00AA',\r\n    laquo: '\\u00AB',\r\n    not: '\\u00AC',\r\n    shy: '\\u00AD',\r\n    reg: '\\u00AE',\r\n    macr: '\\u00AF',\r\n    deg: '\\u00B0',\r\n    plusmn: '\\u00B1',\r\n    sup2: '\\u00B2',\r\n    sup3: '\\u00B3',\r\n    acute: '\\u00B4',\r\n    micro: '\\u00B5',\r\n    para: '\\u00B6',\r\n    middot: '\\u00B7',\r\n    cedil: '\\u00B8',\r\n    sup1: '\\u00B9',\r\n    ordm: '\\u00BA',\r\n    raquo: '\\u00BB',\r\n    frac14: '\\u00BC',\r\n    frac12: '\\u00BD',\r\n    frac34: '\\u00BE',\r\n    iquest: '\\u00BF',\r\n    Agrave: '\\u00C0',\r\n    Aacute: '\\u00C1',\r\n    Acirc: '\\u00C2',\r\n    Atilde: '\\u00C3',\r\n    Auml: '\\u00C4',\r\n    Aring: '\\u00C5',\r\n    AElig: '\\u00C6',\r\n    Ccedil: '\\u00C7',\r\n    Egrave: '\\u00C8',\r\n    Eacute: '\\u00C9',\r\n    Ecirc: '\\u00CA',\r\n    Euml: '\\u00CB',\r\n    Igrave: '\\u00CC',\r\n    Iacute: '\\u00CD',\r\n    Icirc: '\\u00CE',\r\n    Iuml: '\\u00CF',\r\n    ETH: '\\u00D0',\r\n    Ntilde: '\\u00D1',\r\n    Ograve: '\\u00D2',\r\n    Oacute: '\\u00D3',\r\n    Ocirc: '\\u00D4',\r\n    Otilde: '\\u00D5',\r\n    Ouml: '\\u00D6',\r\n    times: '\\u00D7',\r\n    Oslash: '\\u00D8',\r\n    Ugrave: '\\u00D9',\r\n    Uacute: '\\u00DA',\r\n    Ucirc: '\\u00DB',\r\n    Uuml: '\\u00DC',\r\n    Yacute: '\\u00DD',\r\n    THORN: '\\u00DE',\r\n    szlig: '\\u00DF',\r\n    agrave: '\\u00E0',\r\n    aacute: '\\u00E1',\r\n    acirc: '\\u00E2',\r\n    atilde: '\\u00E3',\r\n    auml: '\\u00E4',\r\n    aring: '\\u00E5',\r\n    aelig: '\\u00E6',\r\n    ccedil: '\\u00E7',\r\n    egrave: '\\u00E8',\r\n    eacute: '\\u00E9',\r\n    ecirc: '\\u00EA',\r\n    euml: '\\u00EB',\r\n    igrave: '\\u00EC',\r\n    iacute: '\\u00ED',\r\n    icirc: '\\u00EE',\r\n    iuml: '\\u00EF',\r\n    eth: '\\u00F0',\r\n    ntilde: '\\u00F1',\r\n    ograve: '\\u00F2',\r\n    oacute: '\\u00F3',\r\n    ocirc: '\\u00F4',\r\n    otilde: '\\u00F5',\r\n    ouml: '\\u00F6',\r\n    divide: '\\u00F7',\r\n    oslash: '\\u00F8',\r\n    ugrave: '\\u00F9',\r\n    uacute: '\\u00FA',\r\n    ucirc: '\\u00FB',\r\n    uuml: '\\u00FC',\r\n    yacute: '\\u00FD',\r\n    thorn: '\\u00FE',\r\n    yuml: '\\u00FF',\r\n    OElig: '\\u0152',\r\n    oelig: '\\u0153',\r\n    Scaron: '\\u0160',\r\n    scaron: '\\u0161',\r\n    Yuml: '\\u0178',\r\n    fnof: '\\u0192',\r\n    circ: '\\u02C6',\r\n    tilde: '\\u02DC',\r\n    Alpha: '\\u0391',\r\n    Beta: '\\u0392',\r\n    Gamma: '\\u0393',\r\n    Delta: '\\u0394',\r\n    Epsilon: '\\u0395',\r\n    Zeta: '\\u0396',\r\n    Eta: '\\u0397',\r\n    Theta: '\\u0398',\r\n    Iota: '\\u0399',\r\n    Kappa: '\\u039A',\r\n    Lambda: '\\u039B',\r\n    Mu: '\\u039C',\r\n    Nu: '\\u039D',\r\n    Xi: '\\u039E',\r\n    Omicron: '\\u039F',\r\n    Pi: '\\u03A0',\r\n    Rho: '\\u03A1',\r\n    Sigma: '\\u03A3',\r\n    Tau: '\\u03A4',\r\n    Upsilon: '\\u03A5',\r\n    Phi: '\\u03A6',\r\n    Chi: '\\u03A7',\r\n    Psi: '\\u03A8',\r\n    Omega: '\\u03A9',\r\n    alpha: '\\u03B1',\r\n    beta: '\\u03B2',\r\n    gamma: '\\u03B3',\r\n    delta: '\\u03B4',\r\n    epsilon: '\\u03B5',\r\n    zeta: '\\u03B6',\r\n    eta: '\\u03B7',\r\n    theta: '\\u03B8',\r\n    iota: '\\u03B9',\r\n    kappa: '\\u03BA',\r\n    lambda: '\\u03BB',\r\n    mu: '\\u03BC',\r\n    nu: '\\u03BD',\r\n    xi: '\\u03BE',\r\n    omicron: '\\u03BF',\r\n    pi: '\\u03C0',\r\n    rho: '\\u03C1',\r\n    sigmaf: '\\u03C2',\r\n    sigma: '\\u03C3',\r\n    tau: '\\u03C4',\r\n    upsilon: '\\u03C5',\r\n    phi: '\\u03C6',\r\n    chi: '\\u03C7',\r\n    psi: '\\u03C8',\r\n    omega: '\\u03C9',\r\n    thetasym: '\\u03D1',\r\n    upsih: '\\u03D2',\r\n    piv: '\\u03D6',\r\n    ensp: '\\u2002',\r\n    emsp: '\\u2003',\r\n    thinsp: '\\u2009',\r\n    zwnj: '\\u200C',\r\n    zwj: '\\u200D',\r\n    lrm: '\\u200E',\r\n    rlm: '\\u200F',\r\n    ndash: '\\u2013',\r\n    mdash: '\\u2014',\r\n    lsquo: '\\u2018',\r\n    rsquo: '\\u2019',\r\n    sbquo: '\\u201A',\r\n    ldquo: '\\u201C',\r\n    rdquo: '\\u201D',\r\n    bdquo: '\\u201E',\r\n    dagger: '\\u2020',\r\n    Dagger: '\\u2021',\r\n    bull: '\\u2022',\r\n    hellip: '\\u2026',\r\n    permil: '\\u2030',\r\n    prime: '\\u2032',\r\n    Prime: '\\u2033',\r\n    lsaquo: '\\u2039',\r\n    rsaquo: '\\u203A',\r\n    oline: '\\u203E',\r\n    frasl: '\\u2044',\r\n    euro: '\\u20AC',\r\n    image: '\\u2111',\r\n    weierp: '\\u2118',\r\n    real: '\\u211C',\r\n    trade: '\\u2122',\r\n    alefsym: '\\u2135',\r\n    larr: '\\u2190',\r\n    uarr: '\\u2191',\r\n    rarr: '\\u2192',\r\n    darr: '\\u2193',\r\n    harr: '\\u2194',\r\n    crarr: '\\u21B5',\r\n    lArr: '\\u21D0',\r\n    uArr: '\\u21D1',\r\n    rArr: '\\u21D2',\r\n    dArr: '\\u21D3',\r\n    hArr: '\\u21D4',\r\n    forall: '\\u2200',\r\n    part: '\\u2202',\r\n    exist: '\\u2203',\r\n    empty: '\\u2205',\r\n    nabla: '\\u2207',\r\n    isin: '\\u2208',\r\n    notin: '\\u2209',\r\n    ni: '\\u220B',\r\n    prod: '\\u220F',\r\n    sum: '\\u2211',\r\n    minus: '\\u2212',\r\n    lowast: '\\u2217',\r\n    radic: '\\u221A',\r\n    prop: '\\u221D',\r\n    infin: '\\u221E',\r\n    ang: '\\u2220',\r\n    and: '\\u2227',\r\n    or: '\\u2228',\r\n    cap: '\\u2229',\r\n    cup: '\\u222A',\r\n    'int': '\\u222B',\r\n    there4: '\\u2234',\r\n    sim: '\\u223C',\r\n    cong: '\\u2245',\r\n    asymp: '\\u2248',\r\n    ne: '\\u2260',\r\n    equiv: '\\u2261',\r\n    le: '\\u2264',\r\n    ge: '\\u2265',\r\n    sub: '\\u2282',\r\n    sup: '\\u2283',\r\n    nsub: '\\u2284',\r\n    sube: '\\u2286',\r\n    supe: '\\u2287',\r\n    oplus: '\\u2295',\r\n    otimes: '\\u2297',\r\n    perp: '\\u22A5',\r\n    sdot: '\\u22C5',\r\n    lceil: '\\u2308',\r\n    rceil: '\\u2309',\r\n    lfloor: '\\u230A',\r\n    rfloor: '\\u230B',\r\n    lang: '\\u2329',\r\n    rang: '\\u232A',\r\n    loz: '\\u25CA',\r\n    spades: '\\u2660',\r\n    clubs: '\\u2663',\r\n    hearts: '\\u2665',\r\n    diams: '\\u2666'\r\n  };\r\n\r\n  const hexNumber = /^[\\da-fA-F]+$/;\r\n  const decimalNumber = /^\\d+$/;\r\n\r\n  // The map to `acorn-jsx` tokens from `acorn` namespace objects.\r\n  const acornJsxMap = new WeakMap();\r\n\r\n  // Get the original tokens for the given `acorn` namespace object.\r\n  function getJsxTokens(acorn) {\r\n    acorn = acorn.Parser.acorn || acorn;\r\n    let acornJsx = acornJsxMap.get(acorn);\r\n    if (!acornJsx) {\r\n      const tt = acorn.tokTypes;\r\n      const TokContext = acorn.TokContext;\r\n      const TokenType = acorn.TokenType;\r\n      const tc_oTag = new TokContext('<tag', false);\r\n      const tc_cTag = new TokContext('</tag', false);\r\n      const tc_expr = new TokContext('<tag>...</tag>', true, true);\r\n      const tokContexts = {\r\n        tc_oTag: tc_oTag,\r\n        tc_cTag: tc_cTag,\r\n        tc_expr: tc_expr\r\n      };\r\n      const tokTypes = {\r\n        jsxName: new TokenType('jsxName'),\r\n        jsxText: new TokenType('jsxText', {beforeExpr: true}),\r\n        jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\r\n        jsxTagEnd: new TokenType('jsxTagEnd')\r\n      };\r\n\r\n      tokTypes.jsxTagStart.updateContext = function() {\r\n        this.context.push(tc_expr); // treat as beginning of JSX expression\r\n        this.context.push(tc_oTag); // start opening tag context\r\n        this.exprAllowed = false;\r\n      };\r\n      tokTypes.jsxTagEnd.updateContext = function(prevType) {\r\n        let out = this.context.pop();\r\n        if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\r\n          this.context.pop();\r\n          this.exprAllowed = this.curContext() === tc_expr;\r\n        } else {\r\n          this.exprAllowed = true;\r\n        }\r\n      };\r\n\r\n      acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\r\n      acornJsxMap.set(acorn, acornJsx);\r\n    }\r\n\r\n    return acornJsx;\r\n  }\r\n\r\n  // Transforms JSX element name to string.\r\n\r\n  function getQualifiedJSXName(object) {\r\n    if (!object)\r\n      return object;\r\n\r\n    if (object.type === 'JSXIdentifier')\r\n      return object.name;\r\n\r\n    if (object.type === 'JSXNamespacedName')\r\n      return object.namespace.name + ':' + object.name.name;\r\n\r\n    if (object.type === 'JSXMemberExpression')\r\n      return getQualifiedJSXName(object.object) + '.' +\r\n      getQualifiedJSXName(object.property);\r\n  }\r\n\r\n  function jsx(options) {\r\n    options = options || {};\r\n    return function(Parser) {\r\n      return plugin({\r\n        allowNamespaces: options.allowNamespaces !== false,\r\n        allowNamespacedObjects: !!options.allowNamespacedObjects\r\n      }, Parser);\r\n    };\r\n  };\r\n\r\n  // This is `tokTypes` of the peer dep.\r\n  // This can be different instances from the actual `tokTypes` this plugin uses.\r\n  Object.defineProperty(jsx, \"tokTypes\", {\r\n    get: function get_tokTypes() {\r\n      return getJsxTokens(require(\"acorn\")).tokTypes;\r\n    },\r\n    configurable: true,\r\n    enumerable: true\r\n  });\r\n\r\n  function plugin(options, Parser) {\r\n    const acorn = Parser.acorn || require(\"acorn\");\r\n    const acornJsx = getJsxTokens(acorn);\r\n    const tt = acorn.tokTypes;\r\n    const tok = acornJsx.tokTypes;\r\n    const tokContexts = acorn.tokContexts;\r\n    const tc_oTag = acornJsx.tokContexts.tc_oTag;\r\n    const tc_cTag = acornJsx.tokContexts.tc_cTag;\r\n    const tc_expr = acornJsx.tokContexts.tc_expr;\r\n    const isNewLine = acorn.isNewLine;\r\n    const isIdentifierStart = acorn.isIdentifierStart;\r\n    const isIdentifierChar = acorn.isIdentifierChar;\r\n\r\n    return class extends Parser {\r\n      // Expose actual `tokTypes` and `tokContexts` to other plugins.\r\n      static get acornJsx() {\r\n        return acornJsx;\r\n      }\r\n\r\n      // Reads inline JSX contents token.\r\n      jsx_readToken() {\r\n        let out = '', chunkStart = this.pos;\r\n        for (;;) {\r\n          if (this.pos >= this.input.length)\r\n            this.raise(this.start, 'Unterminated JSX contents');\r\n          let ch = this.input.charCodeAt(this.pos);\r\n\r\n          switch (ch) {\r\n          case 60: // '<'\r\n          case 123: // '{'\r\n            if (this.pos === this.start) {\r\n              if (ch === 60 && this.exprAllowed) {\r\n                ++this.pos;\r\n                return this.finishToken(tok.jsxTagStart);\r\n              }\r\n              return this.getTokenFromCode(ch);\r\n            }\r\n            out += this.input.slice(chunkStart, this.pos);\r\n            return this.finishToken(tok.jsxText, out);\r\n\r\n          case 38: // '&'\r\n            out += this.input.slice(chunkStart, this.pos);\r\n            out += this.jsx_readEntity();\r\n            chunkStart = this.pos;\r\n            break;\r\n\r\n          case 62: // '>'\r\n          case 125: // '}'\r\n            this.raise(\r\n              this.pos,\r\n              \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\r\n                (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\r\n            );\r\n\r\n          default:\r\n            if (isNewLine(ch)) {\r\n              out += this.input.slice(chunkStart, this.pos);\r\n              out += this.jsx_readNewLine(true);\r\n              chunkStart = this.pos;\r\n            } else {\r\n              ++this.pos;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      jsx_readNewLine(normalizeCRLF) {\r\n        let ch = this.input.charCodeAt(this.pos);\r\n        let out;\r\n        ++this.pos;\r\n        if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\r\n          ++this.pos;\r\n          out = normalizeCRLF ? '\\n' : '\\r\\n';\r\n        } else {\r\n          out = String.fromCharCode(ch);\r\n        }\r\n        if (this.options.locations) {\r\n          ++this.curLine;\r\n          this.lineStart = this.pos;\r\n        }\r\n\r\n        return out;\r\n      }\r\n\r\n      jsx_readString(quote) {\r\n        let out = '', chunkStart = ++this.pos;\r\n        for (;;) {\r\n          if (this.pos >= this.input.length)\r\n            this.raise(this.start, 'Unterminated string constant');\r\n          let ch = this.input.charCodeAt(this.pos);\r\n          if (ch === quote) break;\r\n          if (ch === 38) { // '&'\r\n            out += this.input.slice(chunkStart, this.pos);\r\n            out += this.jsx_readEntity();\r\n            chunkStart = this.pos;\r\n          } else if (isNewLine(ch)) {\r\n            out += this.input.slice(chunkStart, this.pos);\r\n            out += this.jsx_readNewLine(false);\r\n            chunkStart = this.pos;\r\n          } else {\r\n            ++this.pos;\r\n          }\r\n        }\r\n        out += this.input.slice(chunkStart, this.pos++);\r\n        return this.finishToken(tt.string, out);\r\n      }\r\n\r\n      jsx_readEntity() {\r\n        let str = '', count = 0, entity;\r\n        let ch = this.input[this.pos];\r\n        if (ch !== '&')\r\n          this.raise(this.pos, 'Entity must start with an ampersand');\r\n        let startPos = ++this.pos;\r\n        while (this.pos < this.input.length && count++ < 10) {\r\n          ch = this.input[this.pos++];\r\n          if (ch === ';') {\r\n            if (str[0] === '#') {\r\n              if (str[1] === 'x') {\r\n                str = str.substr(2);\r\n                if (hexNumber.test(str))\r\n                  entity = String.fromCharCode(parseInt(str, 16));\r\n              } else {\r\n                str = str.substr(1);\r\n                if (decimalNumber.test(str))\r\n                  entity = String.fromCharCode(parseInt(str, 10));\r\n              }\r\n            } else {\r\n              entity = XHTMLEntities[str];\r\n            }\r\n            break;\r\n          }\r\n          str += ch;\r\n        }\r\n        if (!entity) {\r\n          this.pos = startPos;\r\n          return '&';\r\n        }\r\n        return entity;\r\n      }\r\n\r\n      // Read a JSX identifier (valid tag or attribute name).\r\n      //\r\n      // Optimized version since JSX identifiers can't contain\r\n      // escape characters and so can be read as single slice.\r\n      // Also assumes that first character was already checked\r\n      // by isIdentifierStart in readToken.\r\n\r\n      jsx_readWord() {\r\n        let ch, start = this.pos;\r\n        do {\r\n          ch = this.input.charCodeAt(++this.pos);\r\n        } while (isIdentifierChar(ch) || ch === 45); // '-'\r\n        return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\r\n      }\r\n\r\n      // Parse next token as JSX identifier\r\n\r\n      jsx_parseIdentifier() {\r\n        let node = this.startNode();\r\n        if (this.type === tok.jsxName)\r\n          node.name = this.value;\r\n        else if (this.type.keyword)\r\n          node.name = this.type.keyword;\r\n        else\r\n          this.unexpected();\r\n        this.next();\r\n        return this.finishNode(node, 'JSXIdentifier');\r\n      }\r\n\r\n      // Parse namespaced identifier.\r\n\r\n      jsx_parseNamespacedName() {\r\n        let startPos = this.start, startLoc = this.startLoc;\r\n        let name = this.jsx_parseIdentifier();\r\n        if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\r\n        var node = this.startNodeAt(startPos, startLoc);\r\n        node.namespace = name;\r\n        node.name = this.jsx_parseIdentifier();\r\n        return this.finishNode(node, 'JSXNamespacedName');\r\n      }\r\n\r\n      // Parses element name in any form - namespaced, member\r\n      // or single identifier.\r\n\r\n      jsx_parseElementName() {\r\n        if (this.type === tok.jsxTagEnd) return '';\r\n        let startPos = this.start, startLoc = this.startLoc;\r\n        let node = this.jsx_parseNamespacedName();\r\n        if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\r\n          this.unexpected();\r\n        }\r\n        while (this.eat(tt.dot)) {\r\n          let newNode = this.startNodeAt(startPos, startLoc);\r\n          newNode.object = node;\r\n          newNode.property = this.jsx_parseIdentifier();\r\n          node = this.finishNode(newNode, 'JSXMemberExpression');\r\n        }\r\n        return node;\r\n      }\r\n\r\n      // Parses any type of JSX attribute value.\r\n\r\n      jsx_parseAttributeValue() {\r\n        switch (this.type) {\r\n        case tt.braceL:\r\n          let node = this.jsx_parseExpressionContainer();\r\n          if (node.expression.type === 'JSXEmptyExpression')\r\n            this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\r\n          return node;\r\n\r\n        case tok.jsxTagStart:\r\n        case tt.string:\r\n          return this.parseExprAtom();\r\n\r\n        default:\r\n          this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\r\n        }\r\n      }\r\n\r\n      // JSXEmptyExpression is unique type since it doesn't actually parse anything,\r\n      // and so it should start at the end of last read token (left brace) and finish\r\n      // at the beginning of the next one (right brace).\r\n\r\n      jsx_parseEmptyExpression() {\r\n        let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\r\n        return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\r\n      }\r\n\r\n      // Parses JSX expression enclosed into curly brackets.\r\n\r\n      jsx_parseExpressionContainer() {\r\n        let node = this.startNode();\r\n        this.next();\r\n        node.expression = this.type === tt.braceR\r\n          ? this.jsx_parseEmptyExpression()\r\n          : this.parseExpression();\r\n        this.expect(tt.braceR);\r\n        return this.finishNode(node, 'JSXExpressionContainer');\r\n      }\r\n\r\n      // Parses following JSX attribute name-value pair.\r\n\r\n      jsx_parseAttribute() {\r\n        let node = this.startNode();\r\n        if (this.eat(tt.braceL)) {\r\n          this.expect(tt.ellipsis);\r\n          node.argument = this.parseMaybeAssign();\r\n          this.expect(tt.braceR);\r\n          return this.finishNode(node, 'JSXSpreadAttribute');\r\n        }\r\n        node.name = this.jsx_parseNamespacedName();\r\n        node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\r\n        return this.finishNode(node, 'JSXAttribute');\r\n      }\r\n\r\n      // Parses JSX opening tag starting after '<'.\r\n\r\n      jsx_parseOpeningElementAt(startPos, startLoc) {\r\n        let node = this.startNodeAt(startPos, startLoc);\r\n        node.attributes = [];\r\n        let nodeName = this.jsx_parseElementName();\r\n        if (nodeName) node.name = nodeName;\r\n        while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\r\n          node.attributes.push(this.jsx_parseAttribute());\r\n        node.selfClosing = this.eat(tt.slash);\r\n        this.expect(tok.jsxTagEnd);\r\n        return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\r\n      }\r\n\r\n      // Parses JSX closing tag starting after '</'.\r\n\r\n      jsx_parseClosingElementAt(startPos, startLoc) {\r\n        let node = this.startNodeAt(startPos, startLoc);\r\n        let nodeName = this.jsx_parseElementName();\r\n        if (nodeName) node.name = nodeName;\r\n        this.expect(tok.jsxTagEnd);\r\n        return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\r\n      }\r\n\r\n      // Parses entire JSX element, including it's opening tag\r\n      // (starting after '<'), attributes, contents and closing tag.\r\n\r\n      jsx_parseElementAt(startPos, startLoc) {\r\n        let node = this.startNodeAt(startPos, startLoc);\r\n        let children = [];\r\n        let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\r\n        let closingElement = null;\r\n\r\n        if (!openingElement.selfClosing) {\r\n          contents: for (;;) {\r\n            switch (this.type) {\r\n            case tok.jsxTagStart:\r\n              startPos = this.start; startLoc = this.startLoc;\r\n              this.next();\r\n              if (this.eat(tt.slash)) {\r\n                closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\r\n                break contents;\r\n              }\r\n              children.push(this.jsx_parseElementAt(startPos, startLoc));\r\n              break;\r\n\r\n            case tok.jsxText:\r\n              children.push(this.parseExprAtom());\r\n              break;\r\n\r\n            case tt.braceL:\r\n              children.push(this.jsx_parseExpressionContainer());\r\n              break;\r\n\r\n            default:\r\n              this.unexpected();\r\n            }\r\n          }\r\n          if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\r\n            this.raise(\r\n              closingElement.start,\r\n              'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\r\n          }\r\n        }\r\n        let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\r\n\r\n        node['opening' + fragmentOrElement] = openingElement;\r\n        node['closing' + fragmentOrElement] = closingElement;\r\n        node.children = children;\r\n        if (this.type === tt.relational && this.value === \"<\") {\r\n          this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\r\n        }\r\n        return this.finishNode(node, 'JSX' + fragmentOrElement);\r\n      }\r\n\r\n      // Parse JSX text\r\n\r\n      jsx_parseText() {\r\n        let node = this.parseLiteral(this.value);\r\n        node.type = \"JSXText\";\r\n        return node;\r\n      }\r\n\r\n      // Parses entire JSX element from current position.\r\n\r\n      jsx_parseElement() {\r\n        let startPos = this.start, startLoc = this.startLoc;\r\n        this.next();\r\n        return this.jsx_parseElementAt(startPos, startLoc);\r\n      }\r\n\r\n      parseExprAtom(refShortHandDefaultPos) {\r\n        if (this.type === tok.jsxText)\r\n          return this.jsx_parseText();\r\n        else if (this.type === tok.jsxTagStart)\r\n          return this.jsx_parseElement();\r\n        else\r\n          return super.parseExprAtom(refShortHandDefaultPos);\r\n      }\r\n\r\n      readToken(code) {\r\n        let context = this.curContext();\r\n\r\n        if (context === tc_expr) return this.jsx_readToken();\r\n\r\n        if (context === tc_oTag || context === tc_cTag) {\r\n          if (isIdentifierStart(code)) return this.jsx_readWord();\r\n\r\n          if (code == 62) {\r\n            ++this.pos;\r\n            return this.finishToken(tok.jsxTagEnd);\r\n          }\r\n\r\n          if ((code === 34 || code === 39) && context == tc_oTag)\r\n            return this.jsx_readString(code);\r\n        }\r\n\r\n        if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\r\n          ++this.pos;\r\n          return this.finishToken(tok.jsxTagStart);\r\n        }\r\n        return super.readToken(code);\r\n      }\r\n\r\n      updateContext(prevType) {\r\n        if (this.type == tt.braceL) {\r\n          var curContext = this.curContext();\r\n          if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\r\n          else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\r\n          else super.updateContext(prevType);\r\n          this.exprAllowed = true;\r\n        } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\r\n          this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\r\n          this.context.push(tc_cTag); // reconsider as closing tag context\r\n          this.exprAllowed = false;\r\n        } else {\r\n          return super.updateContext(prevType);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  return jsx;\r\n});"]}