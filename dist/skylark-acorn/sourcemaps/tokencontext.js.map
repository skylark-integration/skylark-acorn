{"version":3,"sources":["tokencontext.js"],"names":["define","m_state","m_tokentype","m_whitespace","Parser","types","tt","lineBreak","TokContext","[object Object]","token","isExpr","preserveSpace","override","generator","this","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","p","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","pp","prototype","initialContext","curContext","context","length","braceIsBlock","prevType","parent","colon","_return","name","exprAllowed","test","input","slice","lastTokEnd","start","_else","semi","eof","parenR","arrow","braceL","_var","_const","inGeneratorContext","i","updateContext","update","type","keyword","dot","call","beforeExpr","overrideContext","tokenCtx","braceR","out","pop","push","dollarBraceL","parenL","statementParens","_if","_for","_with","_while","incDec","_function","_class","backQuote","star","index","allowed","options","ecmaVersion","value"],"mappings":"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","file":"../tokencontext.js","sourcesContent":["define([\n    './state',\n    './tokentype',\n    './whitespace'\n], function (m_state, m_tokentype, m_whitespace) {\n    'use strict';\n    const {Parser} = m_state;\n    const {types : tt} = m_tokentype;\n    const {lineBreak} = m_whitespace;\n    class TokContext {\n        constructor(token, isExpr, preserveSpace, override, generator) {\n            this.token = token;\n            this.isExpr = !!isExpr;\n            this.preserveSpace = !!preserveSpace;\n            this.override = override;\n            this.generator = !!generator;\n        }\n    }\n    const types = {\n        b_stat: new TokContext('{', false),\n        b_expr: new TokContext('{', true),\n        b_tmpl: new TokContext('${', false),\n        p_stat: new TokContext('(', false),\n        p_expr: new TokContext('(', true),\n        q_tmpl: new TokContext('`', true, true, p => p.tryReadTemplateToken()),\n        f_stat: new TokContext('function', false),\n        f_expr: new TokContext('function', true),\n        f_expr_gen: new TokContext('function', true, false, null, true),\n        f_gen: new TokContext('function', false, false, null, true)\n    };\n    const pp = Parser.prototype;\n    pp.initialContext = function () {\n        return [types.b_stat];\n    };\n    pp.curContext = function () {\n        return this.context[this.context.length - 1];\n    };\n    pp.braceIsBlock = function (prevType) {\n        let parent = this.curContext();\n        if (parent === types.f_expr || parent === types.f_stat)\n            return true;\n        if (prevType === tt.colon && (parent === types.b_stat || parent === types.b_expr))\n            return !parent.isExpr;\n        if (prevType === tt._return || prevType === tt.name && this.exprAllowed)\n            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n        if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR || prevType === tt.arrow)\n            return true;\n        if (prevType === tt.braceL)\n            return parent === types.b_stat;\n        if (prevType === tt._var || prevType === tt._const || prevType === tt.name)\n            return false;\n        return !this.exprAllowed;\n    };\n    pp.inGeneratorContext = function () {\n        for (let i = this.context.length - 1; i >= 1; i--) {\n            let context = this.context[i];\n            if (context.token === 'function')\n                return context.generator;\n        }\n        return false;\n    };\n    pp.updateContext = function (prevType) {\n        let update, type = this.type;\n        if (type.keyword && prevType === tt.dot)\n            this.exprAllowed = false;\n        else if (update = type.updateContext)\n            update.call(this, prevType);\n        else\n            this.exprAllowed = type.beforeExpr;\n    };\n    pp.overrideContext = function (tokenCtx) {\n        if (this.curContext() !== tokenCtx) {\n            this.context[this.context.length - 1] = tokenCtx;\n        }\n    };\n    tt.parenR.updateContext = tt.braceR.updateContext = function () {\n        if (this.context.length === 1) {\n            this.exprAllowed = true;\n            return;\n        }\n        let out = this.context.pop();\n        if (out === types.b_stat && this.curContext().token === 'function') {\n            out = this.context.pop();\n        }\n        this.exprAllowed = !out.isExpr;\n    };\n    tt.braceL.updateContext = function (prevType) {\n        this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n        this.exprAllowed = true;\n    };\n    tt.dollarBraceL.updateContext = function () {\n        this.context.push(types.b_tmpl);\n        this.exprAllowed = true;\n    };\n    tt.parenL.updateContext = function (prevType) {\n        let statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while;\n        this.context.push(statementParens ? types.p_stat : types.p_expr);\n        this.exprAllowed = true;\n    };\n    tt.incDec.updateContext = function () {\n    };\n    tt._function.updateContext = tt._class.updateContext = function (prevType) {\n        if (prevType.beforeExpr && prevType !== tt._else && !(prevType === tt.semi && this.curContext() !== types.p_stat) && !(prevType === tt._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n            this.context.push(types.f_expr);\n        else\n            this.context.push(types.f_stat);\n        this.exprAllowed = false;\n    };\n    tt.backQuote.updateContext = function () {\n        if (this.curContext() === types.q_tmpl)\n            this.context.pop();\n        else\n            this.context.push(types.q_tmpl);\n        this.exprAllowed = false;\n    };\n    tt.star.updateContext = function (prevType) {\n        if (prevType === tt._function) {\n            let index = this.context.length - 1;\n            if (this.context[index] === types.f_expr)\n                this.context[index] = types.f_expr_gen;\n            else\n                this.context[index] = types.f_gen;\n        }\n        this.exprAllowed = true;\n    };\n    tt.name.updateContext = function (prevType) {\n        let allowed = false;\n        if (this.options.ecmaVersion >= 6 && prevType !== tt.dot) {\n            if (this.value === 'of' && !this.exprAllowed || this.value === 'yield' && this.inGeneratorContext())\n                allowed = true;\n        }\n        this.exprAllowed = allowed;\n    };\n    return {\n        TokContext: TokContext,\n        types: types\n    };\n});"]}