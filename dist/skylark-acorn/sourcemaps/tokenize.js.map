{"version":3,"sources":["tokenize.js"],"names":["define","m_identifier","m_tokentype","m_state","m_locutil","m_regexp","m_whitespace","m_util","isIdentifierStart","isIdentifierChar","types","tt","keywords","keywordTypes","Parser","SourceLocation","RegExpValidationState","lineBreak","nextLineBreak","isNewLine","nonASCIIwhitespace","codePointToString","Token","[object Object]","p","this","type","value","start","end","options","locations","loc","startLoc","endLoc","ranges","range","pp","prototype","stringToBigInt","str","BigInt","replace","next","ignoreEscapeSequenceInKeyword","keyword","containsEsc","raiseRecoverable","onToken","lastTokEnd","lastTokStart","lastTokEndLoc","lastTokStartLoc","nextToken","getToken","Symbol","iterator","token","done","eof","curContext","preserveSpace","skipSpace","pos","curPosition","input","length","finishToken","override","readToken","fullCharCodeAtPos","code","ecmaVersion","readWord","getTokenFromCode","charCodeAt","skipBlockComment","onComment","indexOf","raise","nextBreak","curLine","lineStart","slice","skipLineComment","startSkip","ch","loop","test","String","fromCharCode","val","prevType","updateContext","readToken_dot","readNumber","next2","ellipsis","dot","readToken_slash","exprAllowed","readRegexp","finishOp","assign","slash","readToken_mult_modulo_exp","size","tokentype","star","modulo","starstar","readToken_pipe_amp","logicalOR","logicalAND","bitwiseOR","bitwiseAND","readToken_caret","bitwiseXOR","readToken_plus_min","inModule","incDec","plusMin","readToken_lt_gt","bitShift","relational","readToken_eq_excl","equality","arrow","eq","prefix","readToken_question","questionDot","coalesce","question","readToken_numberSign","privateId","readWord1","parenL","parenR","semi","comma","bracketL","bracketR","braceL","braceR","colon","backQuote","readRadixNumber","readString","escaped","inClass","charAt","pattern","flagsStart","flags","unexpected","state","regexpState","reset","validateRegExpFlags","validateRegExpPattern","RegExp","e","regexp","readInt","radix","len","maybeLegacyOctalNumericLiteral","allowSeparators","undefined","isLegacyOctalNumericLiteral","total","lastCode","i","Infinity","num","startsWithDot","octal","strict","parseInt","parseFloat","readCodePoint","codePos","readHexChar","invalidStringToken","quote","out","chunkStart","readEscapedChar","string","INVALID_TEMPLATE_ESCAPE_ERROR","tryReadTemplateToken","inTemplateElement","readTmplToken","err","readInvalidTemplateToken","position","message","template","invalidTemplate","dollarBraceL","inTemplate","octalStr","substr","match","n","word","first","astral","escStart","esc","name"],"mappings":";;;;;;;AAAAA,QACI,eACA,cACA,UACA,YACA,WACA,eACA,UACD,SAAUC,EAAcC,EAAaC,EAASC,EAAWC,EAAUC,EAAcC,GAChF,aACA,MAAMC,kBAACA,EAAiBC,iBAAEA,GAAoBR,GAEvCS,MAAQC,EAAIC,SAAWC,GAAgBX,GAExCY,OAACA,GAAUX,GACXY,eAACA,GAAkBX,GACnBY,sBAACA,GAAyBX,GAC1BY,UAACA,EAASC,cAAEA,EAAaC,UAAEA,EAASC,mBAAEA,GAAsBd,GAC5De,kBAACA,GAAqBd,QACtBe,EACFC,YAAYC,GACRC,KAAKC,KAAOF,EAAEE,KACdD,KAAKE,MAAQH,EAAEG,MACfF,KAAKG,MAAQJ,EAAEI,MACfH,KAAKI,IAAML,EAAEK,IACTL,EAAEM,QAAQC,YACVN,KAAKO,IAAM,IAAIjB,EAAeS,EAAGA,EAAES,SAAUT,EAAEU,SAC/CV,EAAEM,QAAQK,SACVV,KAAKW,OACDZ,EAAEI,MACFJ,EAAEK,OAIlB,MAAMQ,EAAKvB,EAAOwB,UAmblB,SAASC,EAAeC,GACpB,MAAsB,mBAAXC,OACA,KAEJA,OAAOD,EAAIE,QAAQ,KAAM,KAtbpCL,EAAGM,KAAO,SAAUC,IACXA,GAAiCnB,KAAKC,KAAKmB,SAAWpB,KAAKqB,aAC5DrB,KAAKsB,iBAAiBtB,KAAKG,MAAO,8BAAgCH,KAAKC,KAAKmB,SAC5EpB,KAAKK,QAAQkB,SACbvB,KAAKK,QAAQkB,QAAQ,IAAI1B,EAAMG,OACnCA,KAAKwB,WAAaxB,KAAKI,IACvBJ,KAAKyB,aAAezB,KAAKG,MACzBH,KAAK0B,cAAgB1B,KAAKS,OAC1BT,KAAK2B,gBAAkB3B,KAAKQ,SAC5BR,KAAK4B,aAEThB,EAAGiB,SAAW,WAEV,OADA7B,KAAKkB,OACE,IAAIrB,EAAMG,OAEC,oBAAX8B,SACPlB,EAAGkB,OAAOC,UAAY,WAClB,OACIb,KAAM,KACF,IAAIc,EAAQhC,KAAK6B,WACjB,OACII,KAAMD,EAAM/B,OAASf,EAAGgD,IACxBhC,MAAO8B,OAK3BpB,EAAGgB,UAAY,WACX,IAAIO,EAAanC,KAAKmC,aAMtB,OALKA,GAAeA,EAAWC,eAC3BpC,KAAKqC,YACTrC,KAAKG,MAAQH,KAAKsC,IACdtC,KAAKK,QAAQC,YACbN,KAAKQ,SAAWR,KAAKuC,eACrBvC,KAAKsC,KAAOtC,KAAKwC,MAAMC,OAChBzC,KAAK0C,YAAYxD,EAAGgD,KAC3BC,EAAWQ,SACJR,EAAWQ,SAAS3C,WAE3BA,KAAK4C,UAAU5C,KAAK6C,sBAE5BjC,EAAGgC,UAAY,SAAUE,GACrB,OAAI/D,EAAkB+D,EAAM9C,KAAKK,QAAQ0C,aAAe,IAAe,KAATD,EACnD9C,KAAKgD,WACThD,KAAKiD,iBAAiBH,IAEjClC,EAAGiC,kBAAoB,WACnB,IAAIC,EAAO9C,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACtC,GAAIQ,GAAQ,OAASA,GAAQ,MACzB,OAAOA,EACX,IAAI5B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,OAAOpB,GAAQ,OAASA,GAAQ,MAAQ4B,GAAQA,GAAQ,IAAM5B,EAAO,UAEzEN,EAAGuC,iBAAmB,WAClB,IAAI3C,EAAWR,KAAKK,QAAQ+C,WAAapD,KAAKuC,cAC1CpC,EAAQH,KAAKsC,IAAKlC,EAAMJ,KAAKwC,MAAMa,QAAQ,KAAMrD,KAAKsC,KAAO,GAIjE,IAHa,IAATlC,GACAJ,KAAKsD,MAAMtD,KAAKsC,IAAM,EAAG,wBAC7BtC,KAAKsC,IAAMlC,EAAM,EACbJ,KAAKK,QAAQC,UACb,IAAK,IAAIiD,EAAWjB,EAAMnC,GAAQoD,EAAY9D,EAAcO,KAAKwC,MAAOF,EAAKtC,KAAKsC,OAAS,KACrFtC,KAAKwD,QACPlB,EAAMtC,KAAKyD,UAAYF,EAG3BvD,KAAKK,QAAQ+C,WACbpD,KAAKK,QAAQ+C,WAAU,EAAMpD,KAAKwC,MAAMkB,MAAMvD,EAAQ,EAAGC,GAAMD,EAAOH,KAAKsC,IAAK9B,EAAUR,KAAKuC,gBAEvG3B,EAAG+C,gBAAkB,SAAUC,GAC3B,IAAIzD,EAAQH,KAAKsC,IACb9B,EAAWR,KAAKK,QAAQ+C,WAAapD,KAAKuC,cAC1CsB,EAAK7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,KAAOsB,GAC3C,KAAO5D,KAAKsC,IAAMtC,KAAKwC,MAAMC,SAAW/C,EAAUmE,IAC9CA,EAAK7D,KAAKwC,MAAMU,aAAalD,KAAKsC,KAElCtC,KAAKK,QAAQ+C,WACbpD,KAAKK,QAAQ+C,WAAU,EAAOpD,KAAKwC,MAAMkB,MAAMvD,EAAQyD,EAAW5D,KAAKsC,KAAMnC,EAAOH,KAAKsC,IAAK9B,EAAUR,KAAKuC,gBAErH3B,EAAGyB,UAAY,WACXyB,EACI,KAAO9D,KAAKsC,IAAMtC,KAAKwC,MAAMC,QAAQ,CACjC,IAAIoB,EAAK7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACpC,OAAQuB,GACR,KAAK,GACL,KAAK,MACC7D,KAAKsC,IACP,MACJ,KAAK,GAC2C,KAAxCtC,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,MAC/BtC,KAAKsC,IAEf,KAAK,GACL,KAAK,KACL,KAAK,OACCtC,KAAKsC,IACHtC,KAAKK,QAAQC,cACXN,KAAKwD,QACPxD,KAAKyD,UAAYzD,KAAKsC,KAE1B,MACJ,KAAK,GACD,OAAQtC,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,IACzC,KAAK,GACDtC,KAAKmD,mBACL,MACJ,KAAK,GACDnD,KAAK2D,gBAAgB,GACrB,MACJ,QACI,MAAMG,EAEV,MACJ,QACI,KAAID,EAAK,GAAKA,EAAK,IAAMA,GAAM,MAAQlE,EAAmBoE,KAAKC,OAAOC,aAAaJ,KAG/E,MAAMC,IAFJ9D,KAAKsC,OAO3B1B,EAAG8B,YAAc,SAAUzC,EAAMiE,GAC7BlE,KAAKI,IAAMJ,KAAKsC,IACZtC,KAAKK,QAAQC,YACbN,KAAKS,OAAST,KAAKuC,eACvB,IAAI4B,EAAWnE,KAAKC,KACpBD,KAAKC,KAAOA,EACZD,KAAKE,MAAQgE,EACblE,KAAKoE,cAAcD,IAEvBvD,EAAGyD,cAAgB,WACf,IAAInD,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,GAAIpB,GAAQ,IAAMA,GAAQ,GACtB,OAAOlB,KAAKsE,YAAW,GAC3B,IAAIC,EAAQvE,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC7C,OAAItC,KAAKK,QAAQ0C,aAAe,GAAc,KAAT7B,GAAyB,KAAVqD,GAChDvE,KAAKsC,KAAO,EACLtC,KAAK0C,YAAYxD,EAAGsF,cAEzBxE,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGuF,OAGnC7D,EAAG8D,gBAAkB,WACjB,IAAIxD,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,OAAItC,KAAK2E,eACH3E,KAAKsC,IACAtC,KAAK4E,cAEH,KAAT1D,EACOlB,KAAK6E,SAAS3F,EAAG4F,OAAQ,GAC7B9E,KAAK6E,SAAS3F,EAAG6F,MAAO,IAEnCnE,EAAGoE,0BAA4B,SAAUlC,GACrC,IAAI5B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GACxC2C,EAAO,EACPC,EAAqB,KAATpC,EAAc5D,EAAGiG,KAAOjG,EAAGkG,OAM3C,OALIpF,KAAKK,QAAQ0C,aAAe,GAAc,KAATD,GAAwB,KAAT5B,MAC9C+D,EACFC,EAAYhG,EAAGmG,SACfnE,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,IAE/B,KAATpB,EACOlB,KAAK6E,SAAS3F,EAAG4F,OAAQG,EAAO,GACpCjF,KAAK6E,SAASK,EAAWD,IAEpCrE,EAAG0E,mBAAqB,SAAUxC,GAC9B,IAAI5B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,GAAIpB,IAAS4B,EAAM,CACf,GAAI9C,KAAKK,QAAQ0C,aAAe,GAAI,CAEhC,GAAc,KADF/C,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAEzC,OAAOtC,KAAK6E,SAAS3F,EAAG4F,OAAQ,GAExC,OAAO9E,KAAK6E,SAAkB,MAAT/B,EAAe5D,EAAGqG,UAAYrG,EAAGsG,WAAY,GAEtE,OAAa,KAATtE,EACOlB,KAAK6E,SAAS3F,EAAG4F,OAAQ,GAC7B9E,KAAK6E,SAAkB,MAAT/B,EAAe5D,EAAGuG,UAAYvG,EAAGwG,WAAY,IAEtE9E,EAAG+E,gBAAkB,WAEjB,OAAa,KADF3F,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAEjCtC,KAAK6E,SAAS3F,EAAG4F,OAAQ,GAC7B9E,KAAK6E,SAAS3F,EAAG0G,WAAY,IAExChF,EAAGiF,mBAAqB,SAAU/C,GAC9B,IAAI5B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,OAAIpB,IAAS4B,EACI,KAAT5B,GAAgBlB,KAAK8F,UAAoD,KAAxC9F,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,IAAkC,IAApBtC,KAAKwB,aAAoBhC,EAAUuE,KAAK/D,KAAKwC,MAAMkB,MAAM1D,KAAKwB,WAAYxB,KAAKsC,MAK5JtC,KAAK6E,SAAS3F,EAAG6G,OAAQ,IAJ5B/F,KAAK2D,gBAAgB,GACrB3D,KAAKqC,YACErC,KAAK4B,aAIP,KAATV,EACOlB,KAAK6E,SAAS3F,EAAG4F,OAAQ,GAC7B9E,KAAK6E,SAAS3F,EAAG8G,QAAS,IAErCpF,EAAGqF,gBAAkB,SAAUnD,GAC3B,IAAI5B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GACxC2C,EAAO,EACX,OAAI/D,IAAS4B,GACTmC,EAAgB,KAATnC,GAAuD,KAAxC9C,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAAY,EAAI,EACxB,KAA3CtC,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM2C,GAC1BjF,KAAK6E,SAAS3F,EAAG4F,OAAQG,EAAO,GACpCjF,KAAK6E,SAAS3F,EAAGgH,SAAUjB,IAEzB,KAAT/D,GAAwB,KAAT4B,GAAgB9C,KAAK8F,UAAoD,KAAxC9F,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,IAAqD,KAAxCtC,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,IAKtH,KAATpB,IACA+D,EAAO,GACJjF,KAAK6E,SAAS3F,EAAGiH,WAAYlB,KANhCjF,KAAK2D,gBAAgB,GACrB3D,KAAKqC,YACErC,KAAK4B,cAMpBhB,EAAGwF,kBAAoB,SAAUtD,GAC7B,IAAI5B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,OAAa,KAATpB,EACOlB,KAAK6E,SAAS3F,EAAGmH,SAAkD,KAAxCrG,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAAY,EAAI,GAC1E,KAATQ,GAAwB,KAAT5B,GAAelB,KAAKK,QAAQ0C,aAAe,GAC1D/C,KAAKsC,KAAO,EACLtC,KAAK0C,YAAYxD,EAAGoH,QAExBtG,KAAK6E,SAAkB,KAAT/B,EAAc5D,EAAGqH,GAAKrH,EAAGsH,OAAQ,IAE1D5F,EAAG6F,mBAAqB,WACpB,MAAM1D,EAAc/C,KAAKK,QAAQ0C,YACjC,GAAIA,GAAe,GAAI,CACnB,IAAI7B,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,GAAa,KAATpB,EAAa,CACb,IAAIqD,EAAQvE,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC7C,GAAIiC,EAAQ,IAAMA,EAAQ,GACtB,OAAOvE,KAAK6E,SAAS3F,EAAGwH,YAAa,GAE7C,GAAa,KAATxF,EAAa,CACb,GAAI6B,GAAe,GAAI,CAEnB,GAAc,KADF/C,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAEzC,OAAOtC,KAAK6E,SAAS3F,EAAG4F,OAAQ,GAExC,OAAO9E,KAAK6E,SAAS3F,EAAGyH,SAAU,IAG1C,OAAO3G,KAAK6E,SAAS3F,EAAG0H,SAAU,IAEtChG,EAAGiG,qBAAuB,WAEtB,IAAI/D,EAAO,GACX,GAFoB9C,KAAKK,QAAQ0C,aAEd,OACb/C,KAAKsC,IACPQ,EAAO9C,KAAK6C,oBACR9D,EAAkB+D,GAAM,IAAkB,KAATA,GACjC,OAAO9C,KAAK0C,YAAYxD,EAAG4H,UAAW9G,KAAK+G,aAGnD/G,KAAKsD,MAAMtD,KAAKsC,IAAK,yBAA2B1C,EAAkBkD,GAAQ,MAE9ElC,EAAGqC,iBAAmB,SAAUH,GAC5B,OAAQA,GACR,KAAK,GACD,OAAO9C,KAAKqE,gBAChB,KAAK,GAED,QADErE,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAG8H,QAC/B,KAAK,GAED,QADEhH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAG+H,QAC/B,KAAK,GAED,QADEjH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGgI,MAC/B,KAAK,GAED,QADElH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGiI,OAC/B,KAAK,GAED,QADEnH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGkI,UAC/B,KAAK,GAED,QADEpH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGmI,UAC/B,KAAK,IAED,QADErH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGoI,QAC/B,KAAK,IAED,QADEtH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGqI,QAC/B,KAAK,GAED,QADEvH,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGsI,OAC/B,KAAK,GACD,GAAIxH,KAAKK,QAAQ0C,YAAc,EAC3B,MAEJ,QADE/C,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGuI,WAC/B,KAAK,GACD,IAAIvG,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC5C,GAAa,MAATpB,GAAyB,KAATA,EAChB,OAAOlB,KAAK0H,gBAAgB,IAChC,GAAI1H,KAAKK,QAAQ0C,aAAe,EAAG,CAC/B,GAAa,MAAT7B,GAAyB,KAATA,EAChB,OAAOlB,KAAK0H,gBAAgB,GAChC,GAAa,KAATxG,GAAwB,KAATA,EACf,OAAOlB,KAAK0H,gBAAgB,GAExC,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACD,OAAO1H,KAAKsE,YAAW,GAC3B,KAAK,GACL,KAAK,GACD,OAAOtE,KAAK2H,WAAW7E,GAC3B,KAAK,GACD,OAAO9C,KAAK0E,kBAChB,KAAK,GACL,KAAK,GACD,OAAO1E,KAAKgF,0BAA0BlC,GAC1C,KAAK,IACL,KAAK,GACD,OAAO9C,KAAKsF,mBAAmBxC,GACnC,KAAK,GACD,OAAO9C,KAAK2F,kBAChB,KAAK,GACL,KAAK,GACD,OAAO3F,KAAK6F,mBAAmB/C,GACnC,KAAK,GACL,KAAK,GACD,OAAO9C,KAAKiG,gBAAgBnD,GAChC,KAAK,GACL,KAAK,GACD,OAAO9C,KAAKoG,kBAAkBtD,GAClC,KAAK,GACD,OAAO9C,KAAKyG,qBAChB,KAAK,IACD,OAAOzG,KAAK6E,SAAS3F,EAAGsH,OAAQ,GACpC,KAAK,GACD,OAAOxG,KAAK6G,uBAEhB7G,KAAKsD,MAAMtD,KAAKsC,IAAK,yBAA2B1C,EAAkBkD,GAAQ,MAE9ElC,EAAGiE,SAAW,SAAU5E,EAAMgF,GAC1B,IAAIlE,EAAMf,KAAKwC,MAAMkB,MAAM1D,KAAKsC,IAAKtC,KAAKsC,IAAM2C,GAEhD,OADAjF,KAAKsC,KAAO2C,EACLjF,KAAK0C,YAAYzC,EAAMc,IAElCH,EAAGgE,WAAa,WACZ,IAAIgD,EAASC,EAAS1H,EAAQH,KAAKsC,IACnC,OAAS,CACDtC,KAAKsC,KAAOtC,KAAKwC,MAAMC,QACvBzC,KAAKsD,MAAMnD,EAAO,mCACtB,IAAI0D,EAAK7D,KAAKwC,MAAMsF,OAAO9H,KAAKsC,KAGhC,GAFI9C,EAAUuE,KAAKF,IACf7D,KAAKsD,MAAMnD,EAAO,mCACjByH,EASDA,GAAU,MATA,CACV,GAAW,MAAP/D,EACAgE,GAAU,OACT,GAAW,MAAPhE,GAAcgE,EACnBA,GAAU,OACT,GAAW,MAAPhE,IAAegE,EACpB,MACJD,EAAiB,OAAP/D,IAGZ7D,KAAKsC,IAEX,IAAIyF,EAAU/H,KAAKwC,MAAMkB,MAAMvD,EAAOH,KAAKsC,OACzCtC,KAAKsC,IACP,IAAI0F,EAAahI,KAAKsC,IAClB2F,EAAQjI,KAAK+G,YACb/G,KAAKqB,aACLrB,KAAKkI,WAAWF,GACpB,MAAMG,EAAQnI,KAAKoI,cAAgBpI,KAAKoI,YAAc,IAAI7I,EAAsBS,OAChFmI,EAAME,MAAMlI,EAAO4H,EAASE,GAC5BjI,KAAKsI,oBAAoBH,GACzBnI,KAAKuI,sBAAsBJ,GAC3B,IAAIjI,EAAQ,KACZ,IACIA,EAAQ,IAAIsI,OAAOT,EAASE,GAC9B,MAAOQ,IAET,OAAOzI,KAAK0C,YAAYxD,EAAGwJ,QACvBX,QAAAA,EACAE,MAAAA,EACA/H,MAAAA,KAGRU,EAAG+H,QAAU,SAAUC,EAAOC,EAAKC,GAC/B,MAAMC,EAAkB/I,KAAKK,QAAQ0C,aAAe,SAAciG,IAARH,EACpDI,EAA8BH,GAAsE,KAApC9I,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACjG,IAAInC,EAAQH,KAAKsC,IAAK4G,EAAQ,EAAGC,EAAW,EAC5C,IAAK,IAAIC,EAAI,EAAGX,EAAW,MAAPI,EAAcQ,EAAAA,EAAWR,EAAKO,EAAIX,IAAKW,IAAKpJ,KAAKsC,IAAK,CACtE,IAA4C4B,EAAxCpB,EAAO9C,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACtC,GAAIyG,GAA4B,KAATjG,EACfmG,GACAjJ,KAAKsB,iBAAiBtB,KAAKsC,IAAK,qEACnB,KAAb6G,GACAnJ,KAAKsB,iBAAiBtB,KAAKsC,IAAK,oDAC1B,IAAN8G,GACApJ,KAAKsB,iBAAiBtB,KAAKsC,IAAK,2DACpC6G,EAAWrG,MAPf,CAkBA,IAPIoB,EADApB,GAAQ,GACFA,EAAO,GAAK,GACbA,GAAQ,GACPA,EAAO,GAAK,GACbA,GAAQ,IAAMA,GAAQ,GACrBA,EAAO,GAEPuG,EAAAA,IACCT,EACP,MACJO,EAAWrG,EACXoG,EAAQA,EAAQN,EAAQ1E,GAI5B,OAFI6E,GAAgC,KAAbI,GACnBnJ,KAAKsB,iBAAiBtB,KAAKsC,IAAM,EAAG,0DACpCtC,KAAKsC,MAAQnC,GAAgB,MAAP0I,GAAe7I,KAAKsC,IAAMnC,IAAU0I,EACnD,KACJK,GAcXtI,EAAG8G,gBAAkB,SAAUkB,GAC3B,IAAIzI,EAAQH,KAAKsC,IACjBtC,KAAKsC,KAAO,EACZ,IAAI4B,EAAMlE,KAAK2I,QAAQC,GAQvB,OAPW,MAAP1E,GACAlE,KAAKsD,MAAMtD,KAAKG,MAAQ,EAAG,4BAA8ByI,GACzD5I,KAAKK,QAAQ0C,aAAe,IAA0C,MAApC/C,KAAKwC,MAAMU,WAAWlD,KAAKsC,MAC7D4B,EAAMpD,EAAed,KAAKwC,MAAMkB,MAAMvD,EAAOH,KAAKsC,QAChDtC,KAAKsC,KACAvD,EAAkBiB,KAAK6C,sBAC9B7C,KAAKsD,MAAMtD,KAAKsC,IAAK,oCAClBtC,KAAK0C,YAAYxD,EAAGoK,IAAKpF,IAEpCtD,EAAG0D,WAAa,SAAUiF,GACtB,IAAIpJ,EAAQH,KAAKsC,IACZiH,GAAuD,OAAtCvJ,KAAK2I,QAAQ,QAAIK,GAAW,IAC9ChJ,KAAKsD,MAAMnD,EAAO,kBACtB,IAAIqJ,EAAQxJ,KAAKsC,IAAMnC,GAAS,GAAsC,KAAjCH,KAAKwC,MAAMU,WAAW/C,GACvDqJ,GAASxJ,KAAKyJ,QACdzJ,KAAKsD,MAAMnD,EAAO,kBACtB,IAAIe,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACtC,IAAKkH,IAAUD,GAAiBvJ,KAAKK,QAAQ0C,aAAe,IAAe,MAAT7B,EAAc,CAC5E,IAAIgD,EAAMpD,EAAed,KAAKwC,MAAMkB,MAAMvD,EAAOH,KAAKsC,MAItD,QAHEtC,KAAKsC,IACHvD,EAAkBiB,KAAK6C,sBACvB7C,KAAKsD,MAAMtD,KAAKsC,IAAK,oCAClBtC,KAAK0C,YAAYxD,EAAGoK,IAAKpF,GAEhCsF,GAAS,OAAOzF,KAAK/D,KAAKwC,MAAMkB,MAAMvD,EAAOH,KAAKsC,QAClDkH,GAAQ,GACC,KAATtI,GAAgBsI,MACdxJ,KAAKsC,IACPtC,KAAK2I,QAAQ,IACbzH,EAAOlB,KAAKwC,MAAMU,WAAWlD,KAAKsC,MAExB,KAATpB,GAAwB,MAATA,GAAkBsI,IAErB,MADbtI,EAAOlB,KAAKwC,MAAMU,aAAalD,KAAKsC,OACR,KAATpB,KACblB,KAAKsC,IACc,OAArBtC,KAAK2I,QAAQ,KACb3I,KAAKsD,MAAMnD,EAAO,mBAEtBpB,EAAkBiB,KAAK6C,sBACvB7C,KAAKsD,MAAMtD,KAAKsC,IAAK,oCACzB,IAAI4B,GAxDgBnD,EAwDKf,KAAKwC,MAAMkB,MAAMvD,EAAOH,KAAKsC,KAAMkH,EAtDjDE,SAAS3I,EAAK,GAElB4I,WAAW5I,EAAIE,QAAQ,KAAM,MAJxC,IAAwBF,EAyDpB,OAAOf,KAAK0C,YAAYxD,EAAGoK,IAAKpF,IAEpCtD,EAAGgJ,cAAgB,WACf,IAA0C9G,EAC1C,GAAW,MADF9C,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACpB,CACRtC,KAAKK,QAAQ0C,YAAc,GAC3B/C,KAAKkI,aACT,IAAI2B,IAAY7J,KAAKsC,IACrBQ,EAAO9C,KAAK8J,YAAY9J,KAAKwC,MAAMa,QAAQ,IAAKrD,KAAKsC,KAAOtC,KAAKsC,OAC/DtC,KAAKsC,IACHQ,EAAO,SACP9C,KAAK+J,mBAAmBF,EAAS,iCAErC/G,EAAO9C,KAAK8J,YAAY,GAE5B,OAAOhH,GAEXlC,EAAG+G,WAAa,SAAUqC,GACtB,IAAIC,EAAM,GAAIC,IAAelK,KAAKsC,IAClC,OAAS,CACDtC,KAAKsC,KAAOtC,KAAKwC,MAAMC,QACvBzC,KAAKsD,MAAMtD,KAAKG,MAAO,gCAC3B,IAAI0D,EAAK7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACpC,GAAIuB,IAAOmG,EACP,MACO,KAAPnG,GACAoG,GAAOjK,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,KACzC2H,GAAOjK,KAAKmK,iBAAgB,GAC5BD,EAAalK,KAAKsC,KACJ,OAAPuB,GAAsB,OAAPA,GAClB7D,KAAKK,QAAQ0C,YAAc,IAC3B/C,KAAKsD,MAAMtD,KAAKG,MAAO,kCACzBH,KAAKsC,IACHtC,KAAKK,QAAQC,YACbN,KAAKwD,UACLxD,KAAKyD,UAAYzD,KAAKsC,OAGtB5C,EAAUmE,IACV7D,KAAKsD,MAAMtD,KAAKG,MAAO,kCACzBH,KAAKsC,KAIf,OADA2H,GAAOjK,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,OAClCtC,KAAK0C,YAAYxD,EAAGkL,OAAQH,IAEvC,MAAMI,KAyLN,OAxLAzJ,EAAG0J,qBAAuB,WACtBtK,KAAKuK,mBAAoB,EACzB,IACIvK,KAAKwK,gBACP,MAAOC,GACL,GAAIA,IAAQJ,EAGR,MAAMI,EAFNzK,KAAK0K,2BAKb1K,KAAKuK,mBAAoB,GAE7B3J,EAAGmJ,mBAAqB,SAAUY,EAAUC,GACxC,GAAI5K,KAAKuK,mBAAqBvK,KAAKK,QAAQ0C,aAAe,EACtD,MAAMsH,EAENrK,KAAKsD,MAAMqH,EAAUC,IAG7BhK,EAAG4J,cAAgB,WACf,IAAIP,EAAM,GAAIC,EAAalK,KAAKsC,IAChC,OAAS,CACDtC,KAAKsC,KAAOtC,KAAKwC,MAAMC,QACvBzC,KAAKsD,MAAMtD,KAAKG,MAAO,yBAC3B,IAAI0D,EAAK7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACpC,GAAW,KAAPuB,GAAoB,KAAPA,GAAqD,MAAxC7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,IAAM,GAC3D,OAAItC,KAAKsC,MAAQtC,KAAKG,OAAUH,KAAKC,OAASf,EAAG2L,UAAY7K,KAAKC,OAASf,EAAG4L,iBAS9Eb,GAAOjK,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,KAClCtC,KAAK0C,YAAYxD,EAAG2L,SAAUZ,IATtB,KAAPpG,GACA7D,KAAKsC,KAAO,EACLtC,KAAK0C,YAAYxD,EAAG6L,kBAEzB/K,KAAKsC,IACAtC,KAAK0C,YAAYxD,EAAGuI,YAMvC,GAAW,KAAP5D,EACAoG,GAAOjK,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,KACzC2H,GAAOjK,KAAKmK,iBAAgB,GAC5BD,EAAalK,KAAKsC,SACf,GAAI5C,EAAUmE,GAAK,CAGtB,OAFAoG,GAAOjK,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,OACvCtC,KAAKsC,IACCuB,GACR,KAAK,GACuC,KAApC7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,QACzBtC,KAAKsC,IACf,KAAK,GACD2H,GAAO,KACP,MACJ,QACIA,GAAOjG,OAAOC,aAAaJ,GAG3B7D,KAAKK,QAAQC,cACXN,KAAKwD,QACPxD,KAAKyD,UAAYzD,KAAKsC,KAE1B4H,EAAalK,KAAKsC,UAEhBtC,KAAKsC,MAInB1B,EAAG8J,yBAA2B,WAC1B,KAAO1K,KAAKsC,IAAMtC,KAAKwC,MAAMC,OAAQzC,KAAKsC,MACtC,OAAQtC,KAAKwC,MAAMxC,KAAKsC,MACxB,IAAK,OACCtC,KAAKsC,IACP,MACJ,IAAK,IACD,GAAiC,MAA7BtC,KAAKwC,MAAMxC,KAAKsC,IAAM,GACtB,MAER,IAAK,IACD,OAAOtC,KAAK0C,YAAYxD,EAAG4L,gBAAiB9K,KAAKwC,MAAMkB,MAAM1D,KAAKG,MAAOH,KAAKsC,MAGtFtC,KAAKsD,MAAMtD,KAAKG,MAAO,0BAE3BS,EAAGuJ,gBAAkB,SAAUa,GAC3B,IAAInH,EAAK7D,KAAKwC,MAAMU,aAAalD,KAAKsC,KAEtC,SADEtC,KAAKsC,IACCuB,GACR,KAAK,IACD,MAAO,KACX,KAAK,IACD,MAAO,KACX,KAAK,IACD,OAAOG,OAAOC,aAAajE,KAAK8J,YAAY,IAChD,KAAK,IACD,OAAOlK,EAAkBI,KAAK4J,iBAClC,KAAK,IACD,MAAO,KACX,KAAK,GACD,MAAO,KACX,KAAK,IACD,MAAO,KACX,KAAK,IACD,MAAO,KACX,KAAK,GACuC,KAApC5J,KAAKwC,MAAMU,WAAWlD,KAAKsC,QACzBtC,KAAKsC,IACf,KAAK,GAKD,OAJItC,KAAKK,QAAQC,YACbN,KAAKyD,UAAYzD,KAAKsC,MACpBtC,KAAKwD,SAEJ,GACX,KAAK,GACL,KAAK,GAID,GAHIxD,KAAKyJ,QACLzJ,KAAK+J,mBAAmB/J,KAAKsC,IAAM,EAAG,2BAEtC0I,EAAY,CACZ,MAAMnB,EAAU7J,KAAKsC,IAAM,EAC3BtC,KAAK+J,mBAAmBF,EAAS,8CAEzC,QACI,GAAIhG,GAAM,IAAMA,GAAM,GAAI,CACtB,IAAIoH,EAAWjL,KAAKwC,MAAM0I,OAAOlL,KAAKsC,IAAM,EAAG,GAAG6I,MAAM,WAAW,GAC/D3B,EAAQE,SAASuB,EAAU,GAU/B,OATIzB,EAAQ,MACRyB,EAAWA,EAASvH,MAAM,GAAI,GAC9B8F,EAAQE,SAASuB,EAAU,IAE/BjL,KAAKsC,KAAO2I,EAASxI,OAAS,EAC9BoB,EAAK7D,KAAKwC,MAAMU,WAAWlD,KAAKsC,KACd,MAAb2I,GAA2B,KAAPpH,GAAoB,KAAPA,IAAe7D,KAAKyJ,SAAUuB,GAChEhL,KAAK+J,mBAAmB/J,KAAKsC,IAAM,EAAI2I,EAASxI,OAAQuI,EAAa,mCAAqC,gCAEvGhH,OAAOC,aAAauF,GAE/B,OAAI9J,EAAUmE,GACH,GAEJG,OAAOC,aAAaJ,KAGnCjD,EAAGkJ,YAAc,SAAUjB,GACvB,IAAIgB,EAAU7J,KAAKsC,IACf8I,EAAIpL,KAAK2I,QAAQ,GAAIE,GAGzB,OAFU,OAANuC,GACApL,KAAK+J,mBAAmBF,EAAS,iCAC9BuB,GAEXxK,EAAGmG,UAAY,WACX/G,KAAKqB,aAAc,EACnB,IAAIgK,EAAO,GAAIC,GAAQ,EAAMpB,EAAalK,KAAKsC,IAC3CiJ,EAASvL,KAAKK,QAAQ0C,aAAe,EACzC,KAAO/C,KAAKsC,IAAMtC,KAAKwC,MAAMC,QAAQ,CACjC,IAAIoB,EAAK7D,KAAK6C,oBACd,GAAI7D,EAAiB6E,EAAI0H,GACrBvL,KAAKsC,KAAOuB,GAAM,MAAQ,EAAI,MAC3B,CAAA,GAAW,KAAPA,EAaP,MAbkB,CAClB7D,KAAKqB,aAAc,EACnBgK,GAAQrL,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,KAC1C,IAAIkJ,EAAWxL,KAAKsC,IACsB,MAAtCtC,KAAKwC,MAAMU,aAAalD,KAAKsC,MAC7BtC,KAAK+J,mBAAmB/J,KAAKsC,IAAK,+CACpCtC,KAAKsC,IACP,IAAImJ,EAAMzL,KAAK4J,iBACT0B,EAAQvM,EAAoBC,GAAkByM,EAAKF,IACrDvL,KAAK+J,mBAAmByB,EAAU,0BACtCH,GAAQzL,EAAkB6L,GAC1BvB,EAAalK,KAAKsC,KAItBgJ,GAAQ,EAEZ,OAAOD,EAAOrL,KAAKwC,MAAMkB,MAAMwG,EAAYlK,KAAKsC,MAEpD1B,EAAGoC,SAAW,WACV,IAAIqI,EAAOrL,KAAK+G,YACZ9G,EAAOf,EAAGwM,KAId,OAHI1L,KAAKb,SAAS4E,KAAKsH,KACnBpL,EAAOb,EAAaiM,IAEjBrL,KAAK0C,YAAYzC,EAAMoL,KAEzBxL,MAAOA","file":"../tokenize.js","sourcesContent":["define([\n    './identifier',\n    './tokentype',\n    './state',\n    './locutil',\n    './regexp',\n    './whitespace',\n    './util'\n], function (m_identifier, m_tokentype, m_state, m_locutil, m_regexp, m_whitespace, m_util) {\n    'use strict';\n    const {isIdentifierStart, isIdentifierChar} = m_identifier;\n\n    const {types : tt, keywords : keywordTypes} = m_tokentype;\n\n    const {Parser} = m_state;\n    const {SourceLocation} = m_locutil;\n    const {RegExpValidationState} = m_regexp;\n    const {lineBreak, nextLineBreak, isNewLine, nonASCIIwhitespace} = m_whitespace;\n    const {codePointToString} = m_util;\n    class Token {\n        constructor(p) {\n            this.type = p.type;\n            this.value = p.value;\n            this.start = p.start;\n            this.end = p.end;\n            if (p.options.locations)\n                this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n            if (p.options.ranges)\n                this.range = [\n                    p.start,\n                    p.end\n                ];\n        }\n    }\n    const pp = Parser.prototype;\n    pp.next = function (ignoreEscapeSequenceInKeyword) {\n        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n            this.raiseRecoverable(this.start, 'Escape sequence in keyword ' + this.type.keyword);\n        if (this.options.onToken)\n            this.options.onToken(new Token(this));\n        this.lastTokEnd = this.end;\n        this.lastTokStart = this.start;\n        this.lastTokEndLoc = this.endLoc;\n        this.lastTokStartLoc = this.startLoc;\n        this.nextToken();\n    };\n    pp.getToken = function () {\n        this.next();\n        return new Token(this);\n    };\n    if (typeof Symbol !== 'undefined')\n        pp[Symbol.iterator] = function () {\n            return {\n                next: () => {\n                    let token = this.getToken();\n                    return {\n                        done: token.type === tt.eof,\n                        value: token\n                    };\n                }\n            };\n        };\n    pp.nextToken = function () {\n        let curContext = this.curContext();\n        if (!curContext || !curContext.preserveSpace)\n            this.skipSpace();\n        this.start = this.pos;\n        if (this.options.locations)\n            this.startLoc = this.curPosition();\n        if (this.pos >= this.input.length)\n            return this.finishToken(tt.eof);\n        if (curContext.override)\n            return curContext.override(this);\n        else\n            this.readToken(this.fullCharCodeAtPos());\n    };\n    pp.readToken = function (code) {\n        if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92)\n            return this.readWord();\n        return this.getTokenFromCode(code);\n    };\n    pp.fullCharCodeAtPos = function () {\n        let code = this.input.charCodeAt(this.pos);\n        if (code <= 55295 || code >= 56320)\n            return code;\n        let next = this.input.charCodeAt(this.pos + 1);\n        return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;\n    };\n    pp.skipBlockComment = function () {\n        let startLoc = this.options.onComment && this.curPosition();\n        let start = this.pos, end = this.input.indexOf('*/', this.pos += 2);\n        if (end === -1)\n            this.raise(this.pos - 2, 'Unterminated comment');\n        this.pos = end + 2;\n        if (this.options.locations) {\n            for (let nextBreak, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n                ++this.curLine;\n                pos = this.lineStart = nextBreak;\n            }\n        }\n        if (this.options.onComment)\n            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n    };\n    pp.skipLineComment = function (startSkip) {\n        let start = this.pos;\n        let startLoc = this.options.onComment && this.curPosition();\n        let ch = this.input.charCodeAt(this.pos += startSkip);\n        while (this.pos < this.input.length && !isNewLine(ch)) {\n            ch = this.input.charCodeAt(++this.pos);\n        }\n        if (this.options.onComment)\n            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n    };\n    pp.skipSpace = function () {\n        loop:\n            while (this.pos < this.input.length) {\n                let ch = this.input.charCodeAt(this.pos);\n                switch (ch) {\n                case 32:\n                case 160:\n                    ++this.pos;\n                    break;\n                case 13:\n                    if (this.input.charCodeAt(this.pos + 1) === 10) {\n                        ++this.pos;\n                    }\n                case 10:\n                case 8232:\n                case 8233:\n                    ++this.pos;\n                    if (this.options.locations) {\n                        ++this.curLine;\n                        this.lineStart = this.pos;\n                    }\n                    break;\n                case 47:\n                    switch (this.input.charCodeAt(this.pos + 1)) {\n                    case 42:\n                        this.skipBlockComment();\n                        break;\n                    case 47:\n                        this.skipLineComment(2);\n                        break;\n                    default:\n                        break loop;\n                    }\n                    break;\n                default:\n                    if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n                        ++this.pos;\n                    } else {\n                        break loop;\n                    }\n                }\n            }\n    };\n    pp.finishToken = function (type, val) {\n        this.end = this.pos;\n        if (this.options.locations)\n            this.endLoc = this.curPosition();\n        let prevType = this.type;\n        this.type = type;\n        this.value = val;\n        this.updateContext(prevType);\n    };\n    pp.readToken_dot = function () {\n        let next = this.input.charCodeAt(this.pos + 1);\n        if (next >= 48 && next <= 57)\n            return this.readNumber(true);\n        let next2 = this.input.charCodeAt(this.pos + 2);\n        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n            this.pos += 3;\n            return this.finishToken(tt.ellipsis);\n        } else {\n            ++this.pos;\n            return this.finishToken(tt.dot);\n        }\n    };\n    pp.readToken_slash = function () {\n        let next = this.input.charCodeAt(this.pos + 1);\n        if (this.exprAllowed) {\n            ++this.pos;\n            return this.readRegexp();\n        }\n        if (next === 61)\n            return this.finishOp(tt.assign, 2);\n        return this.finishOp(tt.slash, 1);\n    };\n    pp.readToken_mult_modulo_exp = function (code) {\n        let next = this.input.charCodeAt(this.pos + 1);\n        let size = 1;\n        let tokentype = code === 42 ? tt.star : tt.modulo;\n        if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n            ++size;\n            tokentype = tt.starstar;\n            next = this.input.charCodeAt(this.pos + 2);\n        }\n        if (next === 61)\n            return this.finishOp(tt.assign, size + 1);\n        return this.finishOp(tokentype, size);\n    };\n    pp.readToken_pipe_amp = function (code) {\n        let next = this.input.charCodeAt(this.pos + 1);\n        if (next === code) {\n            if (this.options.ecmaVersion >= 12) {\n                let next2 = this.input.charCodeAt(this.pos + 2);\n                if (next2 === 61)\n                    return this.finishOp(tt.assign, 3);\n            }\n            return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2);\n        }\n        if (next === 61)\n            return this.finishOp(tt.assign, 2);\n        return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1);\n    };\n    pp.readToken_caret = function () {\n        let next = this.input.charCodeAt(this.pos + 1);\n        if (next === 61)\n            return this.finishOp(tt.assign, 2);\n        return this.finishOp(tt.bitwiseXOR, 1);\n    };\n    pp.readToken_plus_min = function (code) {\n        let next = this.input.charCodeAt(this.pos + 1);\n        if (next === code) {\n            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n                this.skipLineComment(3);\n                this.skipSpace();\n                return this.nextToken();\n            }\n            return this.finishOp(tt.incDec, 2);\n        }\n        if (next === 61)\n            return this.finishOp(tt.assign, 2);\n        return this.finishOp(tt.plusMin, 1);\n    };\n    pp.readToken_lt_gt = function (code) {\n        let next = this.input.charCodeAt(this.pos + 1);\n        let size = 1;\n        if (next === code) {\n            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n            if (this.input.charCodeAt(this.pos + size) === 61)\n                return this.finishOp(tt.assign, size + 1);\n            return this.finishOp(tt.bitShift, size);\n        }\n        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n            this.skipLineComment(4);\n            this.skipSpace();\n            return this.nextToken();\n        }\n        if (next === 61)\n            size = 2;\n        return this.finishOp(tt.relational, size);\n    };\n    pp.readToken_eq_excl = function (code) {\n        let next = this.input.charCodeAt(this.pos + 1);\n        if (next === 61)\n            return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n            this.pos += 2;\n            return this.finishToken(tt.arrow);\n        }\n        return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1);\n    };\n    pp.readToken_question = function () {\n        const ecmaVersion = this.options.ecmaVersion;\n        if (ecmaVersion >= 11) {\n            let next = this.input.charCodeAt(this.pos + 1);\n            if (next === 46) {\n                let next2 = this.input.charCodeAt(this.pos + 2);\n                if (next2 < 48 || next2 > 57)\n                    return this.finishOp(tt.questionDot, 2);\n            }\n            if (next === 63) {\n                if (ecmaVersion >= 12) {\n                    let next2 = this.input.charCodeAt(this.pos + 2);\n                    if (next2 === 61)\n                        return this.finishOp(tt.assign, 3);\n                }\n                return this.finishOp(tt.coalesce, 2);\n            }\n        }\n        return this.finishOp(tt.question, 1);\n    };\n    pp.readToken_numberSign = function () {\n        const ecmaVersion = this.options.ecmaVersion;\n        let code = 35;\n        if (ecmaVersion >= 13) {\n            ++this.pos;\n            code = this.fullCharCodeAtPos();\n            if (isIdentifierStart(code, true) || code === 92) {\n                return this.finishToken(tt.privateId, this.readWord1());\n            }\n        }\n        this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n    };\n    pp.getTokenFromCode = function (code) {\n        switch (code) {\n        case 46:\n            return this.readToken_dot();\n        case 40:\n            ++this.pos;\n            return this.finishToken(tt.parenL);\n        case 41:\n            ++this.pos;\n            return this.finishToken(tt.parenR);\n        case 59:\n            ++this.pos;\n            return this.finishToken(tt.semi);\n        case 44:\n            ++this.pos;\n            return this.finishToken(tt.comma);\n        case 91:\n            ++this.pos;\n            return this.finishToken(tt.bracketL);\n        case 93:\n            ++this.pos;\n            return this.finishToken(tt.bracketR);\n        case 123:\n            ++this.pos;\n            return this.finishToken(tt.braceL);\n        case 125:\n            ++this.pos;\n            return this.finishToken(tt.braceR);\n        case 58:\n            ++this.pos;\n            return this.finishToken(tt.colon);\n        case 96:\n            if (this.options.ecmaVersion < 6)\n                break;\n            ++this.pos;\n            return this.finishToken(tt.backQuote);\n        case 48:\n            let next = this.input.charCodeAt(this.pos + 1);\n            if (next === 120 || next === 88)\n                return this.readRadixNumber(16);\n            if (this.options.ecmaVersion >= 6) {\n                if (next === 111 || next === 79)\n                    return this.readRadixNumber(8);\n                if (next === 98 || next === 66)\n                    return this.readRadixNumber(2);\n            }\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            return this.readNumber(false);\n        case 34:\n        case 39:\n            return this.readString(code);\n        case 47:\n            return this.readToken_slash();\n        case 37:\n        case 42:\n            return this.readToken_mult_modulo_exp(code);\n        case 124:\n        case 38:\n            return this.readToken_pipe_amp(code);\n        case 94:\n            return this.readToken_caret();\n        case 43:\n        case 45:\n            return this.readToken_plus_min(code);\n        case 60:\n        case 62:\n            return this.readToken_lt_gt(code);\n        case 61:\n        case 33:\n            return this.readToken_eq_excl(code);\n        case 63:\n            return this.readToken_question();\n        case 126:\n            return this.finishOp(tt.prefix, 1);\n        case 35:\n            return this.readToken_numberSign();\n        }\n        this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n    };\n    pp.finishOp = function (type, size) {\n        let str = this.input.slice(this.pos, this.pos + size);\n        this.pos += size;\n        return this.finishToken(type, str);\n    };\n    pp.readRegexp = function () {\n        let escaped, inClass, start = this.pos;\n        for (;;) {\n            if (this.pos >= this.input.length)\n                this.raise(start, 'Unterminated regular expression');\n            let ch = this.input.charAt(this.pos);\n            if (lineBreak.test(ch))\n                this.raise(start, 'Unterminated regular expression');\n            if (!escaped) {\n                if (ch === '[')\n                    inClass = true;\n                else if (ch === ']' && inClass)\n                    inClass = false;\n                else if (ch === '/' && !inClass)\n                    break;\n                escaped = ch === '\\\\';\n            } else\n                escaped = false;\n            ++this.pos;\n        }\n        let pattern = this.input.slice(start, this.pos);\n        ++this.pos;\n        let flagsStart = this.pos;\n        let flags = this.readWord1();\n        if (this.containsEsc)\n            this.unexpected(flagsStart);\n        const state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n        state.reset(start, pattern, flags);\n        this.validateRegExpFlags(state);\n        this.validateRegExpPattern(state);\n        let value = null;\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n        }\n        return this.finishToken(tt.regexp, {\n            pattern,\n            flags,\n            value\n        });\n    };\n    pp.readInt = function (radix, len, maybeLegacyOctalNumericLiteral) {\n        const allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n        const isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n        let start = this.pos, total = 0, lastCode = 0;\n        for (let i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n            let code = this.input.charCodeAt(this.pos), val;\n            if (allowSeparators && code === 95) {\n                if (isLegacyOctalNumericLiteral)\n                    this.raiseRecoverable(this.pos, 'Numeric separator is not allowed in legacy octal numeric literals');\n                if (lastCode === 95)\n                    this.raiseRecoverable(this.pos, 'Numeric separator must be exactly one underscore');\n                if (i === 0)\n                    this.raiseRecoverable(this.pos, 'Numeric separator is not allowed at the first of digits');\n                lastCode = code;\n                continue;\n            }\n            if (code >= 97)\n                val = code - 97 + 10;\n            else if (code >= 65)\n                val = code - 65 + 10;\n            else if (code >= 48 && code <= 57)\n                val = code - 48;\n            else\n                val = Infinity;\n            if (val >= radix)\n                break;\n            lastCode = code;\n            total = total * radix + val;\n        }\n        if (allowSeparators && lastCode === 95)\n            this.raiseRecoverable(this.pos - 1, 'Numeric separator is not allowed at the last of digits');\n        if (this.pos === start || len != null && this.pos - start !== len)\n            return null;\n        return total;\n    };\n    function stringToNumber(str, isLegacyOctalNumericLiteral) {\n        if (isLegacyOctalNumericLiteral) {\n            return parseInt(str, 8);\n        }\n        return parseFloat(str.replace(/_/g, ''));\n    }\n    function stringToBigInt(str) {\n        if (typeof BigInt !== 'function') {\n            return null;\n        }\n        return BigInt(str.replace(/_/g, ''));\n    }\n    pp.readRadixNumber = function (radix) {\n        let start = this.pos;\n        this.pos += 2;\n        let val = this.readInt(radix);\n        if (val == null)\n            this.raise(this.start + 2, 'Expected number in radix ' + radix);\n        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n            val = stringToBigInt(this.input.slice(start, this.pos));\n            ++this.pos;\n        } else if (isIdentifierStart(this.fullCharCodeAtPos()))\n            this.raise(this.pos, 'Identifier directly after number');\n        return this.finishToken(tt.num, val);\n    };\n    pp.readNumber = function (startsWithDot) {\n        let start = this.pos;\n        if (!startsWithDot && this.readInt(10, undefined, true) === null)\n            this.raise(start, 'Invalid number');\n        let octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n        if (octal && this.strict)\n            this.raise(start, 'Invalid number');\n        let next = this.input.charCodeAt(this.pos);\n        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n            let val = stringToBigInt(this.input.slice(start, this.pos));\n            ++this.pos;\n            if (isIdentifierStart(this.fullCharCodeAtPos()))\n                this.raise(this.pos, 'Identifier directly after number');\n            return this.finishToken(tt.num, val);\n        }\n        if (octal && /[89]/.test(this.input.slice(start, this.pos)))\n            octal = false;\n        if (next === 46 && !octal) {\n            ++this.pos;\n            this.readInt(10);\n            next = this.input.charCodeAt(this.pos);\n        }\n        if ((next === 69 || next === 101) && !octal) {\n            next = this.input.charCodeAt(++this.pos);\n            if (next === 43 || next === 45)\n                ++this.pos;\n            if (this.readInt(10) === null)\n                this.raise(start, 'Invalid number');\n        }\n        if (isIdentifierStart(this.fullCharCodeAtPos()))\n            this.raise(this.pos, 'Identifier directly after number');\n        let val = stringToNumber(this.input.slice(start, this.pos), octal);\n        return this.finishToken(tt.num, val);\n    };\n    pp.readCodePoint = function () {\n        let ch = this.input.charCodeAt(this.pos), code;\n        if (ch === 123) {\n            if (this.options.ecmaVersion < 6)\n                this.unexpected();\n            let codePos = ++this.pos;\n            code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n            ++this.pos;\n            if (code > 1114111)\n                this.invalidStringToken(codePos, 'Code point out of bounds');\n        } else {\n            code = this.readHexChar(4);\n        }\n        return code;\n    };\n    pp.readString = function (quote) {\n        let out = '', chunkStart = ++this.pos;\n        for (;;) {\n            if (this.pos >= this.input.length)\n                this.raise(this.start, 'Unterminated string constant');\n            let ch = this.input.charCodeAt(this.pos);\n            if (ch === quote)\n                break;\n            if (ch === 92) {\n                out += this.input.slice(chunkStart, this.pos);\n                out += this.readEscapedChar(false);\n                chunkStart = this.pos;\n            } else if (ch === 8232 || ch === 8233) {\n                if (this.options.ecmaVersion < 10)\n                    this.raise(this.start, 'Unterminated string constant');\n                ++this.pos;\n                if (this.options.locations) {\n                    this.curLine++;\n                    this.lineStart = this.pos;\n                }\n            } else {\n                if (isNewLine(ch))\n                    this.raise(this.start, 'Unterminated string constant');\n                ++this.pos;\n            }\n        }\n        out += this.input.slice(chunkStart, this.pos++);\n        return this.finishToken(tt.string, out);\n    };\n    const INVALID_TEMPLATE_ESCAPE_ERROR = {};\n    pp.tryReadTemplateToken = function () {\n        this.inTemplateElement = true;\n        try {\n            this.readTmplToken();\n        } catch (err) {\n            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n                this.readInvalidTemplateToken();\n            } else {\n                throw err;\n            }\n        }\n        this.inTemplateElement = false;\n    };\n    pp.invalidStringToken = function (position, message) {\n        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n            throw INVALID_TEMPLATE_ESCAPE_ERROR;\n        } else {\n            this.raise(position, message);\n        }\n    };\n    pp.readTmplToken = function () {\n        let out = '', chunkStart = this.pos;\n        for (;;) {\n            if (this.pos >= this.input.length)\n                this.raise(this.start, 'Unterminated template');\n            let ch = this.input.charCodeAt(this.pos);\n            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n                if (this.pos === this.start && (this.type === tt.template || this.type === tt.invalidTemplate)) {\n                    if (ch === 36) {\n                        this.pos += 2;\n                        return this.finishToken(tt.dollarBraceL);\n                    } else {\n                        ++this.pos;\n                        return this.finishToken(tt.backQuote);\n                    }\n                }\n                out += this.input.slice(chunkStart, this.pos);\n                return this.finishToken(tt.template, out);\n            }\n            if (ch === 92) {\n                out += this.input.slice(chunkStart, this.pos);\n                out += this.readEscapedChar(true);\n                chunkStart = this.pos;\n            } else if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.pos);\n                ++this.pos;\n                switch (ch) {\n                case 13:\n                    if (this.input.charCodeAt(this.pos) === 10)\n                        ++this.pos;\n                case 10:\n                    out += '\\n';\n                    break;\n                default:\n                    out += String.fromCharCode(ch);\n                    break;\n                }\n                if (this.options.locations) {\n                    ++this.curLine;\n                    this.lineStart = this.pos;\n                }\n                chunkStart = this.pos;\n            } else {\n                ++this.pos;\n            }\n        }\n    };\n    pp.readInvalidTemplateToken = function () {\n        for (; this.pos < this.input.length; this.pos++) {\n            switch (this.input[this.pos]) {\n            case '\\\\':\n                ++this.pos;\n                break;\n            case '$':\n                if (this.input[this.pos + 1] !== '{') {\n                    break;\n                }\n            case '`':\n                return this.finishToken(tt.invalidTemplate, this.input.slice(this.start, this.pos));\n            }\n        }\n        this.raise(this.start, 'Unterminated template');\n    };\n    pp.readEscapedChar = function (inTemplate) {\n        let ch = this.input.charCodeAt(++this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 110:\n            return '\\n';\n        case 114:\n            return '\\r';\n        case 120:\n            return String.fromCharCode(this.readHexChar(2));\n        case 117:\n            return codePointToString(this.readCodePoint());\n        case 116:\n            return '\\t';\n        case 98:\n            return '\\b';\n        case 118:\n            return '\\x0B';\n        case 102:\n            return '\\f';\n        case 13:\n            if (this.input.charCodeAt(this.pos) === 10)\n                ++this.pos;\n        case 10:\n            if (this.options.locations) {\n                this.lineStart = this.pos;\n                ++this.curLine;\n            }\n            return '';\n        case 56:\n        case 57:\n            if (this.strict) {\n                this.invalidStringToken(this.pos - 1, 'Invalid escape sequence');\n            }\n            if (inTemplate) {\n                const codePos = this.pos - 1;\n                this.invalidStringToken(codePos, 'Invalid escape sequence in template string');\n            }\n        default:\n            if (ch >= 48 && ch <= 55) {\n                let octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n                let octal = parseInt(octalStr, 8);\n                if (octal > 255) {\n                    octalStr = octalStr.slice(0, -1);\n                    octal = parseInt(octalStr, 8);\n                }\n                this.pos += octalStr.length - 1;\n                ch = this.input.charCodeAt(this.pos);\n                if ((octalStr !== '0' || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n                    this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? 'Octal literal in template string' : 'Octal literal in strict mode');\n                }\n                return String.fromCharCode(octal);\n            }\n            if (isNewLine(ch)) {\n                return '';\n            }\n            return String.fromCharCode(ch);\n        }\n    };\n    pp.readHexChar = function (len) {\n        let codePos = this.pos;\n        let n = this.readInt(16, len);\n        if (n === null)\n            this.invalidStringToken(codePos, 'Bad character escape sequence');\n        return n;\n    };\n    pp.readWord1 = function () {\n        this.containsEsc = false;\n        let word = '', first = true, chunkStart = this.pos;\n        let astral = this.options.ecmaVersion >= 6;\n        while (this.pos < this.input.length) {\n            let ch = this.fullCharCodeAtPos();\n            if (isIdentifierChar(ch, astral)) {\n                this.pos += ch <= 65535 ? 1 : 2;\n            } else if (ch === 92) {\n                this.containsEsc = true;\n                word += this.input.slice(chunkStart, this.pos);\n                let escStart = this.pos;\n                if (this.input.charCodeAt(++this.pos) !== 117)\n                    this.invalidStringToken(this.pos, 'Expecting Unicode escape sequence \\\\uXXXX');\n                ++this.pos;\n                let esc = this.readCodePoint();\n                if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n                    this.invalidStringToken(escStart, 'Invalid Unicode escape');\n                word += codePointToString(esc);\n                chunkStart = this.pos;\n            } else {\n                break;\n            }\n            first = false;\n        }\n        return word + this.input.slice(chunkStart, this.pos);\n    };\n    pp.readWord = function () {\n        let word = this.readWord1();\n        let type = tt.name;\n        if (this.keywords.test(word)) {\n            type = keywordTypes[word];\n        }\n        return this.finishToken(type, word);\n    };\n    return { Token: Token };\n});"]}