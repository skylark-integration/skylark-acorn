{"version":3,"sources":["whitespace.js"],"names":["define","lineBreak","isNewLine","code","lineBreakG","RegExp","source","nextLineBreak","from","end","length","i","next","charCodeAt","nonASCIIwhitespace","skipWhiteSpace"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,EAAY,yBAElB,SAASC,EAAUC,GACf,OAAgB,KAATA,GAAwB,KAATA,GAAwB,OAATA,GAA0B,OAATA,EAY1D,OACIF,UAAWA,EACXG,WAhBe,IAAIC,OAAOJ,EAAUK,OAAQ,KAiB5CJ,UAAWA,EACXK,cAdJ,SAAuBJ,EAAMK,EAAMC,EAAMN,EAAKO,QAC1C,IAAK,IAAIC,EAAIH,EAAMG,EAAIF,EAAKE,IAAK,CAC7B,IAAIC,EAAOT,EAAKU,WAAWF,GAC3B,GAAIT,EAAUU,GACV,OAAOD,EAAIF,EAAM,GAAc,KAATG,GAA0C,KAA3BT,EAAKU,WAAWF,EAAI,GAAYA,EAAI,EAAIA,EAAI,EAEzF,OAAQ,GASRG,mBAPuB,gDAQvBC,eAPmB","file":"../whitespace.js","sourcesContent":["define(function () {\n    'use strict';\n    const lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n    const lineBreakG = new RegExp(lineBreak.source, 'g');\n    function isNewLine(code) {\n        return code === 10 || code === 13 || code === 8232 || code === 8233;\n    }\n    function nextLineBreak(code, from, end = code.length) {\n        for (let i = from; i < end; i++) {\n            let next = code.charCodeAt(i);\n            if (isNewLine(next))\n                return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;\n        }\n        return -1;\n    }\n    const nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n    const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n    return {\n        lineBreak: lineBreak,\n        lineBreakG: lineBreakG,\n        isNewLine: isNewLine,\n        nextLineBreak: nextLineBreak,\n        nonASCIIwhitespace: nonASCIIwhitespace,\n        skipWhiteSpace: skipWhiteSpace\n    };\n});"]}